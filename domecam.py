bl_info = {
	"name": "DomeCam Render",
	"author": "Benjamin Waller",
	"version": (0, 2),
	"blender": (2, 6, 0),
	"location": "Properties -> Render",
	"description": "Renders a Domemaster using a 5-camera-setup",
	"warning": "",
	"wiki_url": "https://github.com/Benni-chan/Blender-Fulldome-Addon/wiki",
	"tracker_url": "https://github.com/Benni-chan/Blender-Fulldome-Addon/issues",
	"category": "Render"}


import bpy
import math
import subprocess
import os
import time

from bpy.props import PointerProperty, StringProperty, BoolProperty, EnumProperty, IntProperty, CollectionProperty

modes = (
	('mirror', 'Fisheye (Mirror)', ''),
	('multicam', 'Fisheye (Multicam)', ''),
	('equi', 'Equirectangular', ''),
	)

class multiCamList(bpy.types.PropertyGroup):
	name = bpy.props.StringProperty(name="MultiCam Object", default="")

class mirrorCamList(bpy.types.PropertyGroup):
	name = bpy.props.StringProperty(name="MirrorCam Object", default="")

class OpUpdateList(bpy.types.Operator):
	bl_label = "Update Multi Camera List"
	bl_idname = "dc.updatelist"
	
	def execute(self, context):
		sce= bpy.context.scene
		multiCamList= sce.dc_render.multiCamList
		# clear list
		n=len(multiCamList)
		for i in range(0,n+1):
			multiCamList.remove(n-i)
	
		for index, object in enumerate(bpy.context.scene.objects): #iterate over all objects
			if (object.domecam_type == 'MultiCam'):
				myitem = multiCamList.add()
				myitem.name = object.name
#				print(object.name)
		
		if (len(multiCamList)==0):
			sce.dc_render.cur_multi_cam = ""
		
		#update fisheye_mirror_list
		mirrorCamList=sce.dc_render.mirrorCamList
		# clear list
		n=len(mirrorCamList)
		for i in range(0,n+1):
			mirrorCamList.remove(n-i)
	
		for index, object in enumerate(bpy.context.scene.objects): #iterate over all objects
			if (object.domecam_type == 'MirrorCam'):
				myitem = mirrorCamList.add()
				myitem.name = object.name
#				print(object.name)
		
		if (len(mirrorCamList)==0):
			sce.dc_render.cur_mirror_cam = ""
		
		return {'FINISHED'}

def onUpdateResolution_select(self, context):
	dc = context.scene.dc_render
	
	if (dc.resolution_select != "custom"):
		dc.resolution = int(dc.resolution_select)
	
def onUpdateResolution(self, context):
	rd = context.scene.render
	dc = context.scene.dc_render
	
	rd.resolution_x = dc.resolution
	rd.resolution_y = dc.resolution
	rd.resolution_percentage = 100


resolutions_fisheye = (
	('512', '512', '512x512'),
	('1024', '1024', '1024x1024'),
	('2048', '2048', '2048x2048'),
	('3072', '3072', '3072x3072'),
	('4096', '4096', '4096x4096'),
	('custom', 'custom', 'select your custom resolution'),
	)

image_format = (
	('png', 'PNG', ''),
	('jpg', 'JPG', ''),
	('tiff', 'TIFF', ''),
	)

class DCSettings(bpy.types.PropertyGroup):
	nonapath = StringProperty(name='Path to nona', description='full path to nona binary', maxlen=1024, subtype='FILE_PATH', default='/Applications/Hugin/HuginTools/nona')
	renderpath = StringProperty(name='Renderpath', description='Renderpath', maxlen=1024, subtype='DIR_PATH', default='//render')
	filename = StringProperty(name='Filename', description='filename (use # for framenumber)', maxlen=256, subtype='FILENAME', default='######')

	cur_multi_cam = StringProperty(name='Camera (Multi)', description='Select Multi Camera System to use', maxlen=256, default='')
	cur_mirror_cam = StringProperty(name='Camera (Mirror)', description='Select Mirror Camera System to use', maxlen=256, default='')
	
	resolution = IntProperty(name='Resolution', description='Resolution of finished Domemaster', default=1024, min=0, max=10000, update=onUpdateResolution)
	resolution_select = EnumProperty(items=resolutions_fisheye, name='Resolution', description='Resolution of finished Domemaster', default='1024', update=onUpdateResolution_select)
	
	fov = IntProperty(name='Field of View', description='Field of View (use values > 180 for compression)', default=180, min=180, max=360)
	
	stamp_text = StringProperty(name='Stamp Text', description='Text for Stamp', maxlen=1024, default='')
	
	domecam_mode = EnumProperty(items=modes, name='DomeCam Mode', description='Select 5-camera-setup, 6-camera-setup or fisheye mirror lens', default='multicam')
#	use_domecam = BoolProperty(name='Use Domecam', description='Use Domecam System for Render', default=False)
	
	use_comp = BoolProperty(name='Use compositor on Domemaster', description='Use Postprocessing on Domemaster', default=True)
	use_border = BoolProperty(name='Use border render', description='Use border rendering to reduce rendertime', default=True)
	keep_files = BoolProperty(name='Keep temporary files', description='if unchecked, the camera images and nona project file will be deleted', default=True)
	
	multiCamList = bpy.props.CollectionProperty(type = multiCamList)
	multiCamList_index = bpy.props.IntProperty(min = -1, default = -1)
	
	mirrorCamList = bpy.props.CollectionProperty(type = mirrorCamList)
	mirrorCamList_index = bpy.props.IntProperty(min = -1, default = -1)


class OpAddMultiCams(bpy.types.Operator):
	bl_label = "Add Multi-Camera Setup to scene"
	bl_idname = "dc.add_multi_cams"
	
	def execute(self, context):
		scene = bpy.context.scene
		
		#if ("DomeCam" not in bpy.data.cameras):
		cam_data = bpy.data.cameras.new("DomeCam")
		#else:
		#	cam_data = bpy.data.cameras["DomeCam"]
		cam_data.angle = math.radians(90.0)
		cam_data.clip_end = 10000
		cam_ob_front = bpy.data.objects.new(name="DomeCam_Front", object_data=cam_data)
		cam_ob_back = bpy.data.objects.new(name="DomeCam_Back", object_data=cam_data)
		cam_ob_left = bpy.data.objects.new(name="DomeCam_Left", object_data=cam_data)
		cam_ob_right = bpy.data.objects.new(name="DomeCam_Right", object_data=cam_data)
		cam_ob_top = bpy.data.objects.new(name="DomeCam_Top", object_data=cam_data)
		cam_ob_down = bpy.data.objects.new(name="DomeCam_Down", object_data=cam_data)
		
		cam_ob_front.domecam_view = "front"
		cam_ob_back.domecam_view = "back"
		cam_ob_left.domecam_view = "left"
		cam_ob_right.domecam_view = "right"
		cam_ob_top.domecam_view = "top"
		cam_ob_down.domecam_view = "down"
		
		# instance the camera object in the scene
		scene.objects.link(cam_ob_front)
		scene.objects.link(cam_ob_back)
		scene.objects.link(cam_ob_left)
		scene.objects.link(cam_ob_right)
		scene.objects.link(cam_ob_top)
		scene.objects.link(cam_ob_down)
		
		cam_ob_front.hide = False
		cam_ob_front.hide_select = True
		cam_ob_back.hide = True
		cam_ob_back.hide_select = True
		cam_ob_left.hide = True
		cam_ob_left.hide_select = True
		cam_ob_right.hide = True
		cam_ob_right.hide_select = True
		cam_ob_top.hide = False
		cam_ob_top.hide_select = True
		cam_ob_down.hide = True
		cam_ob_down.hide_select = True
		
		cam_ob_front.location = 0.0, 0.0, 0.0
		cam_ob_back.location  = 0.0, 0.0, 0.0
		cam_ob_left.location  = 0.0, 0.0, 0.0
		cam_ob_right.location = 0.0, 0.0, 0.0
		cam_ob_top.location	  = 0.0, 0.0, 0.0
		cam_ob_down.location  = 0.0, 0.0, 0.0
		
		cam_ob_front.rotation_euler = math.radians(90.0), math.radians(0.0), math.radians(0.0)
		cam_ob_back.rotation_euler	= math.radians(90.0), math.radians(0.0), math.radians(180.0)
		cam_ob_left.rotation_euler	= math.radians(90.0), math.radians(0.0), math.radians(90.0)
		cam_ob_right.rotation_euler = math.radians(90.0), math.radians(0.0), math.radians(-90.0)
		cam_ob_top.rotation_euler	= math.radians(180.0), math.radians(0.0), math.radians(0.0)
		cam_ob_down.rotation_euler	= math.radians(0.0), math.radians(0.0), math.radians(0.0)
		
		scene.camera = cam_ob_front		  # set the active camera
		
		cam_empty = bpy.data.objects.new("DomeCam",None)
		scene.objects.link(cam_empty)
		cam_empty.domecam_type = 'MultiCam'
		cam_empty.empty_draw_type = "SINGLE_ARROW"
		cam_empty.empty_draw_size = 1
		
		cam_ob_front.parent=cam_empty
		cam_ob_back.parent=cam_empty
		cam_ob_left.parent=cam_empty
		cam_ob_right.parent=cam_empty
		cam_ob_top.parent=cam_empty
		cam_ob_down.parent=cam_empty
		
		bpy.ops.dc.updatelist()
		scene.dc_render.cur_multi_cam = cam_empty.name
		
		return {'FINISHED'}

class OpAddMirrorCam(bpy.types.Operator):
	bl_label = "Add Fisheye Mirror to scene"
	bl_idname = "dc.add_mirror_cams"

	def execute(self, context):
		scene = bpy.context.scene

		cam_data = bpy.data.cameras.new("FisheyeCam")
		cam_data.angle = math.radians(90.0)
		cam_data.clip_end = 10000
		cam_ob = bpy.data.objects.new(name="FisheyeCam", object_data=cam_data)

		cam_ob.domecam_view = "fisheye"

		# instance the camera object in the scene
		scene.objects.link(cam_ob)

		cam_ob.hide = True
		cam_ob.hide_select = True
		cam_ob_front.location = 0.0, 0.0, 0.0
		cam_ob.rotation_euler = math.radians(0.0), math.radians(0.0), math.radians(0.0)

		scene.camera = cam_ob		  # set the active camera
		
		#verts = [(0.0294, 0.0, 0.1751), (0.3333, 0.0, 0.0747), (0.4616, 0.0455, -0.0436), (0.4424, 0.0436, -0.0213), (0.4222, 0.0416, 0.0001), (0.401, 0.0395, 0.0204), (0.3788, 0.0373, 0.0396), (0.3557, 0.035, 0.0577), (0.3317, 0.0327, 0.0747), (0.307, 0.0302, 0.0904), (0.2815, 0.0277, 0.1049), (0.2553, 0.0251, 0.1182), (0.2285, 0.0225, 0.1301), (0.2012, 0.0198, 0.1407), (0.1733, 0.0171, 0.15), (0.1451, 0.0143, 0.1578), (0.1165, 0.0115, 0.1643), (0.0876, 0.0086, 0.1693), (0.0585, 0.0058, 0.1729), (0.0293, 0.0029, 0.1751), (0.0289, 0.0057, 0.1751), (0.0577, 0.0115, 0.1729), (0.0863, 0.0172, 0.1693), (0.1148, 0.0228, 0.1643), (0.143, 0.0284, 0.1578), (0.1708, 0.034, 0.15), (0.1982, 0.0394, 0.1407), (0.2252, 0.0448, 0.1301), (0.2516, 0.05, 0.1182), (0.2774, 0.0552, 0.1049), (0.3025, 0.0602, 0.0904), (0.3269, 0.065, 0.0747), (0.3506, 0.0697, 0.0577), (0.3733, 0.0743, 0.0396), (0.3952, 0.0786, 0.0204), (0.4161, 0.0828, 0.0001), (0.436, 0.0867, -0.0213), (0.4549, 0.0905, -0.0436), (0.4438, 0.1346, -0.0436), (0.4254, 0.1291, -0.0213), (0.406, 0.1232, 0.0001), (0.3856, 0.117, 0.0204), (0.3642, 0.1105, 0.0396), (0.342, 0.1038, 0.0577), (0.319, 0.0968, 0.0747), (0.2952, 0.0895, 0.0904), (0.2707, 0.0821, 0.1049), (0.2455, 0.0745, 0.1182), (0.2197, 0.0667, 0.1301), (0.1934, 0.0587, 0.1407), (0.1667, 0.0506, 0.15), (0.1395, 0.0423, 0.1578), (0.112, 0.034, 0.1643), (0.0842, 0.0256, 0.1693), (0.0563, 0.0171, 0.1729), (0.0282, 0.0085, 0.1751), (0.0272, 0.0113, 0.1751), (0.0543, 0.0225, 0.1729), (0.0813, 0.0337, 0.1693), (0.1081, 0.0448, 0.1643), (0.1347, 0.0558, 0.1578), (0.1609, 0.0667, 0.15), (0.1867, 0.0774, 0.1407), (0.2121, 0.0879, 0.1301), (0.237, 0.0982, 0.1182), (0.2613, 0.1082, 0.1049), (0.285, 0.118, 0.0904), (0.308, 0.1276, 0.0747), (0.3302, 0.1368, 0.0577), (0.3517, 0.1457, 0.0396), (0.3723, 0.1542, 0.0204), (0.392, 0.1624, 0.0001), (0.4107, 0.1701, -0.0213), (0.4285, 0.1775, -0.0436), (0.409, 0.2186, -0.0436), (0.3921, 0.2096, -0.0213), (0.3742, 0.2, 0.0001), (0.3554, 0.1899, 0.0204), (0.3357, 0.1794, 0.0396), (0.3152, 0.1685, 0.0577), (0.294, 0.1571, 0.0747), (0.272, 0.1454, 0.0904), (0.2494, 0.1333, 0.1049), (0.2262, 0.1209, 0.1182), (0.2025, 0.1082, 0.1301), (0.1783, 0.0953, 0.1407), (0.1536, 0.0821, 0.15), (0.1286, 0.0687, 0.1578), (0.1032, 0.0552, 0.1643), (0.0776, 0.0415, 0.1693), (0.0519, 0.0277, 0.1729), (0.026, 0.0139, 0.1751), (0.0245, 0.0164, 0.1751), (0.0489, 0.0327, 0.1729), (0.0732, 0.0489, 0.1693), (0.0973, 0.065, 0.1643), (0.1212, 0.081, 0.1578), (0.1448, 0.0968, 0.15), (0.1681, 0.1123, 0.1407), (0.1909, 0.1276, 0.1301), (0.2133, 0.1425, 0.1182), (0.2352, 0.1571, 0.1049), (0.2565, 0.1714, 0.0904), (0.2772, 0.1852, 0.0747), (0.2972, 0.1986, 0.0577), (0.3165, 0.2115, 0.0396), (0.335, 0.2239, 0.0204), (0.3528, 0.2357, 0.0001), (0.3696, 0.247, -0.0213), (0.3856, 0.2577, -0.0436), (0.3585, 0.2942, -0.0436), (0.3437, 0.282, -0.0213), (0.328, 0.2692, 0.0001), (0.3115, 0.2556, 0.0204), (0.2942, 0.2415, 0.0396), (0.2763, 0.2267, 0.0577), (0.2577, 0.2115, 0.0747), (0.2384, 0.1957, 0.0904), (0.2186, 0.1794, 0.1049), (0.1983, 0.1627, 0.1182), (0.1775, 0.1457, 0.1301), (0.1563, 0.1282, 0.1407), (0.1346, 0.1105, 0.15), (0.1127, 0.0925, 0.1578), (0.0905, 0.0743, 0.1643), (0.0681, 0.0559, 0.1693), (0.0455, 0.0373, 0.1729), (0.0228, 0.0187, 0.1751), (0.0208, 0.0208, 0.1751), (0.0416, 0.0416, 0.1729), (0.0623, 0.0623, 0.1693), (0.0828, 0.0828, 0.1643), (0.1031, 0.1031, 0.1578), (0.1232, 0.1232, 0.15), (0.1429, 0.1429, 0.1407), (0.1624, 0.1624, 0.1301), (0.1814, 0.1814, 0.1182), (0.2, 0.2, 0.1049), (0.2181, 0.2181, 0.0904), (0.2357, 0.2357, 0.0747), (0.2527, 0.2527, 0.0577), (0.2692, 0.2692, 0.0396), (0.2849, 0.2849, 0.0204), (0.3, 0.3, 0.0001), (0.3144, 0.3144, -0.0213), (0.328, 0.328, -0.0436), (0.2942, 0.3585, -0.0436), (0.282, 0.3437, -0.0213), (0.2692, 0.328, 0.0001), (0.2556, 0.3115, 0.0204), (0.2415, 0.2942, 0.0396), (0.2267, 0.2763, 0.0577), (0.2115, 0.2577, 0.0747), (0.1957, 0.2384, 0.0904), (0.1794, 0.2186, 0.1049), (0.1627, 0.1983, 0.1182), (0.1457, 0.1775, 0.1301), (0.1282, 0.1563, 0.1407), (0.1105, 0.1346, 0.15), (0.0925, 0.1127, 0.1578), (0.0743, 0.0905, 0.1643), (0.0559, 0.0681, 0.1693), (0.0373, 0.0455, 0.1729), (0.0187, 0.0228, 0.1751), (0.0164, 0.0245, 0.1751), (0.0327, 0.0489, 0.1729), (0.0489, 0.0732, 0.1693), (0.065, 0.0973, 0.1643), (0.081, 0.1212, 0.1578), (0.0968, 0.1448, 0.15), (0.1123, 0.1681, 0.1407), (0.1276, 0.1909, 0.1301), (0.1425, 0.2133, 0.1182), (0.1571, 0.2352, 0.1049), (0.1714, 0.2565, 0.0904), (0.1852, 0.2772, 0.0747), (0.1986, 0.2972, 0.0577), (0.2115, 0.3165, 0.0396), (0.2239, 0.335, 0.0204), (0.2357, 0.3528, 0.0001), (0.247, 0.3696, -0.0213), (0.2577, 0.3856, -0.0436), (0.2186, 0.409, -0.0436), (0.2096, 0.3921, -0.0213), (0.2, 0.3742, 0.0001), (0.1899, 0.3554, 0.0204), (0.1794, 0.3357, 0.0396), (0.1685, 0.3152, 0.0577), (0.1571, 0.294, 0.0747), (0.1454, 0.272, 0.0904), (0.1333, 0.2494, 0.1049), (0.1209, 0.2262, 0.1182), (0.1082, 0.2025, 0.1301), (0.0953, 0.1783, 0.1407), (0.0821, 0.1536, 0.15), (0.0687, 0.1286, 0.1578), (0.0552, 0.1032, 0.1643), (0.0415, 0.0776, 0.1693), (0.0277, 0.0519, 0.1729), (0.0139, 0.026, 0.1751), (0.0113, 0.0272, 0.1751), (0.0225, 0.0543, 0.1729), (0.0337, 0.0813, 0.1693), (0.0448, 0.1081, 0.1643), (0.0558, 0.1347, 0.1578), (0.0667, 0.1609, 0.15), (0.0774, 0.1867, 0.1407), (0.0879, 0.2121, 0.1301), (0.0982, 0.237, 0.1182), (0.1082, 0.2613, 0.1049), (0.118, 0.285, 0.0904), (0.1276, 0.308, 0.0747), (0.1368, 0.3302, 0.0577), (0.1457, 0.3517, 0.0396), (0.1542, 0.3723, 0.0204), (0.1624, 0.392, 0.0001), (0.1701, 0.4107, -0.0213), (0.1775, 0.4285, -0.0436), (0.1346, 0.4438, -0.0436), (0.1291, 0.4254, -0.0213), (0.1232, 0.406, 0.0001), (0.117, 0.3856, 0.0204), (0.1105, 0.3642, 0.0396), (0.1038, 0.342, 0.0577), (0.0968, 0.319, 0.0747), (0.0895, 0.2952, 0.0904), (0.0821, 0.2707, 0.1049), (0.0745, 0.2455, 0.1182), (0.0667, 0.2197, 0.1301), (0.0587, 0.1934, 0.1407), (0.0506, 0.1667, 0.15), (0.0423, 0.1395, 0.1578), (0.034, 0.112, 0.1643), (0.0256, 0.0842, 0.1693), (0.0171, 0.0563, 0.1729), (0.0085, 0.0282, 0.1751), (0.0057, 0.0289, 0.1751), (0.0115, 0.0577, 0.1729), (0.0172, 0.0863, 0.1693), (0.0228, 0.1148, 0.1643), (0.0284, 0.143, 0.1578), (0.034, 0.1708, 0.15), (0.0394, 0.1982, 0.1407), (0.0448, 0.2252, 0.1301), (0.05, 0.2516, 0.1182), (0.0552, 0.2774, 0.1049), (0.0602, 0.3025, 0.0904), (0.065, 0.3269, 0.0747), (0.0697, 0.3506, 0.0577), (0.0743, 0.3733, 0.0396), (0.0786, 0.3952, 0.0204), (0.0828, 0.4161, 0.0001), (0.0867, 0.436, -0.0213), (0.0905, 0.4549, -0.0436), (0.0455, 0.4616, -0.0436), (0.0436, 0.4424, -0.0213), (0.0416, 0.4222, 0.0001), (0.0395, 0.401, 0.0204), (0.0373, 0.3788, 0.0396), (0.035, 0.3557, 0.0577), (0.0327, 0.3317, 0.0747), (0.0302, 0.307, 0.0904), (0.0277, 0.2815, 0.1049), (0.0251, 0.2553, 0.1182), (0.0225, 0.2285, 0.1301), (0.0198, 0.2012, 0.1407), (0.0171, 0.1733, 0.15), (0.0143, 0.1451, 0.1578), (0.0115, 0.1165, 0.1643), (0.0086, 0.0876, 0.1693), (0.0058, 0.0585, 0.1729), (0.0029, 0.0293, 0.1751), (-0.0, 0.0294, 0.1751), (-0.0, 0.0588, 0.1729), (0.0, 0.088, 0.1693), (0.0, 0.1171, 0.1643), (-0.0, 0.1458, 0.1578), (-0.0, 0.1742, 0.15), (-0.0, 0.2021, 0.1407), (-0.0, 0.2296, 0.1301), (0.0, 0.2565, 0.1182), (-0.0, 0.2828, 0.1049), (-0.0, 0.3085, 0.0904), (0.0, 0.3333, 0.0747), (-0.0, 0.3574, 0.0577), (0.0, 0.3806, 0.0396), (0.0, 0.4029, 0.0204), (-0.0, 0.4243, 0.0001), (-0.0, 0.4446, -0.0213), (-0.0, 0.4638, -0.0436), (-0.0455, 0.4616, -0.0436), (-0.0436, 0.4424, -0.0213), (-0.0416, 0.4222, 0.0001), (-0.0395, 0.401, 0.0204), (-0.0373, 0.3788, 0.0396), (-0.035, 0.3557, 0.0577), (-0.0327, 0.3317, 0.0747), (-0.0302, 0.307, 0.0904), (-0.0277, 0.2815, 0.1049), (-0.0251, 0.2553, 0.1182), (-0.0225, 0.2285, 0.1301), (-0.0198, 0.2012, 0.1407), (-0.0171, 0.1733, 0.15), (-0.0143, 0.1451, 0.1578), (-0.0115, 0.1165, 0.1643), (-0.0086, 0.0876, 0.1693), (-0.0058, 0.0585, 0.1729), (-0.0029, 0.0293, 0.1751), (-0.0057, 0.0289, 0.1751), (-0.0115, 0.0577, 0.1729), (-0.0172, 0.0863, 0.1693), (-0.0228, 0.1148, 0.1643), (-0.0284, 0.143, 0.1578), (-0.034, 0.1708, 0.15), (-0.0394, 0.1982, 0.1407), (-0.0448, 0.2252, 0.1301), (-0.05, 0.2516, 0.1182), (-0.0552, 0.2774, 0.1049), (-0.0602, 0.3025, 0.0904), (-0.065, 0.3269, 0.0747), (-0.0697, 0.3506, 0.0577), (-0.0743, 0.3733, 0.0396), (-0.0786, 0.3952, 0.0204), (-0.0828, 0.4161, 0.0001), (-0.0867, 0.436, -0.0213), (-0.0905, 0.4549, -0.0436), (-0.1346, 0.4438, -0.0436), (-0.1291, 0.4254, -0.0213), (-0.1232, 0.406, 0.0001), (-0.117, 0.3856, 0.0204), (-0.1105, 0.3642, 0.0396), (-0.1038, 0.342, 0.0577), (-0.0968, 0.319, 0.0747), (-0.0895, 0.2952, 0.0904), (-0.0821, 0.2707, 0.1049), (-0.0745, 0.2455, 0.1182), (-0.0667, 0.2197, 0.1301), (-0.0587, 0.1934, 0.1407), (-0.0506, 0.1667, 0.15), (-0.0423, 0.1395, 0.1578), (-0.034, 0.112, 0.1643), (-0.0256, 0.0842, 0.1693), (-0.0171, 0.0563, 0.1729), (-0.0085, 0.0282, 0.1751), (-0.0113, 0.0272, 0.1751), (-0.0225, 0.0543, 0.1729), (-0.0337, 0.0813, 0.1693), (-0.0448, 0.1081, 0.1643), (-0.0558, 0.1347, 0.1578), (-0.0667, 0.1609, 0.15), (-0.0774, 0.1867, 0.1407), (-0.0879, 0.2121, 0.1301), (-0.0982, 0.237, 0.1182), (-0.1082, 0.2613, 0.1049), (-0.118, 0.285, 0.0904), (-0.1276, 0.308, 0.0747), (-0.1368, 0.3302, 0.0577), (-0.1457, 0.3517, 0.0396), (-0.1542, 0.3723, 0.0204), (-0.1624, 0.392, 0.0001), (-0.1701, 0.4107, -0.0213), (-0.1775, 0.4285, -0.0436), (-0.2186, 0.409, -0.0436), (-0.2096, 0.3921, -0.0213), (-0.2, 0.3742, 0.0001), (-0.1899, 0.3554, 0.0204), (-0.1794, 0.3357, 0.0396), (-0.1685, 0.3152, 0.0577), (-0.1571, 0.294, 0.0747), (-0.1454, 0.272, 0.0904), (-0.1333, 0.2494, 0.1049), (-0.1209, 0.2262, 0.1182), (-0.1082, 0.2025, 0.1301), (-0.0953, 0.1783, 0.1407), (-0.0821, 0.1536, 0.15), (-0.0687, 0.1286, 0.1578), (-0.0552, 0.1032, 0.1643), (-0.0415, 0.0776, 0.1693), (-0.0277, 0.0519, 0.1729), (-0.0139, 0.026, 0.1751), (-0.0164, 0.0245, 0.1751), (-0.0327, 0.0489, 0.1729), (-0.0489, 0.0732, 0.1693), (-0.065, 0.0973, 0.1643), (-0.081, 0.1212, 0.1578), (-0.0968, 0.1448, 0.15), (-0.1123, 0.1681, 0.1407), (-0.1276, 0.1909, 0.1301), (-0.1425, 0.2133, 0.1182), (-0.1571, 0.2352, 0.1049), (-0.1714, 0.2565, 0.0904), (-0.1852, 0.2772, 0.0747), (-0.1986, 0.2972, 0.0577), (-0.2115, 0.3165, 0.0396), (-0.2239, 0.335, 0.0204), (-0.2357, 0.3528, 0.0001), (-0.247, 0.3696, -0.0213), (-0.2577, 0.3856, -0.0436), (-0.2942, 0.3585, -0.0436), (-0.282, 0.3437, -0.0213), (-0.2692, 0.328, 0.0001), (-0.2556, 0.3115, 0.0204), (-0.2415, 0.2942, 0.0396), (-0.2267, 0.2763, 0.0577), (-0.2115, 0.2577, 0.0747), (-0.1957, 0.2384, 0.0904), (-0.1794, 0.2186, 0.1049), (-0.1627, 0.1983, 0.1182), (-0.1457, 0.1775, 0.1301), (-0.1282, 0.1563, 0.1407), (-0.1105, 0.1346, 0.15), (-0.0925, 0.1127, 0.1578), (-0.0743, 0.0905, 0.1643), (-0.0559, 0.0681, 0.1693), (-0.0373, 0.0455, 0.1729), (-0.0187, 0.0228, 0.1751), (-0.0208, 0.0208, 0.1751), (-0.0416, 0.0416, 0.1729), (-0.0623, 0.0623, 0.1693), (-0.0828, 0.0828, 0.1643), (-0.1031, 0.1031, 0.1578), (-0.1232, 0.1232, 0.15), (-0.1429, 0.1429, 0.1407), (-0.1624, 0.1624, 0.1301), (-0.1814, 0.1814, 0.1182), (-0.2, 0.2, 0.1049), (-0.2181, 0.2181, 0.0904), (-0.2357, 0.2357, 0.0747), (-0.2527, 0.2527, 0.0577), (-0.2692, 0.2692, 0.0396), (-0.2849, 0.2849, 0.0204), (-0.3, 0.3, 0.0001), (-0.3144, 0.3144, -0.0213), (-0.328, 0.328, -0.0436), (-0.3585, 0.2942, -0.0436), (-0.3437, 0.282, -0.0213), (-0.328, 0.2692, 0.0001), (-0.3115, 0.2556, 0.0204), (-0.2942, 0.2415, 0.0396), (-0.2763, 0.2267, 0.0577), (-0.2577, 0.2115, 0.0747), (-0.2384, 0.1957, 0.0904), (-0.2186, 0.1794, 0.1049), (-0.1983, 0.1627, 0.1182), (-0.1775, 0.1457, 0.1301), (-0.1563, 0.1282, 0.1407), (-0.1346, 0.1105, 0.15), (-0.1127, 0.0925, 0.1578), (-0.0905, 0.0743, 0.1643), (-0.0681, 0.0559, 0.1693), (-0.0455, 0.0373, 0.1729), (-0.0228, 0.0187, 0.1751), (-0.0245, 0.0164, 0.1751), (-0.0489, 0.0327, 0.1729), (-0.0732, 0.0489, 0.1693), (-0.0973, 0.065, 0.1643), (-0.1212, 0.081, 0.1578), (-0.1448, 0.0968, 0.15), (-0.1681, 0.1123, 0.1407), (-0.1909, 0.1276, 0.1301), (-0.2133, 0.1425, 0.1182), (-0.2352, 0.1571, 0.1049), (-0.2565, 0.1714, 0.0904), (-0.2772, 0.1852, 0.0747), (-0.2972, 0.1986, 0.0577), (-0.3165, 0.2115, 0.0396), (-0.335, 0.2239, 0.0204), (-0.3528, 0.2357, 0.0001), (-0.3696, 0.247, -0.0213), (-0.3856, 0.2577, -0.0436), (-0.409, 0.2186, -0.0436), (-0.3921, 0.2096, -0.0213), (-0.3742, 0.2, 0.0001), (-0.3554, 0.1899, 0.0204), (-0.3357, 0.1794, 0.0396), (-0.3152, 0.1685, 0.0577), (-0.294, 0.1571, 0.0747), (-0.272, 0.1454, 0.0904), (-0.2494, 0.1333, 0.1049), (-0.2262, 0.1209, 0.1182), (-0.2025, 0.1082, 0.1301), (-0.1783, 0.0953, 0.1407), (-0.1536, 0.0821, 0.15), (-0.1286, 0.0687, 0.1578), (-0.1032, 0.0552, 0.1643), (-0.0776, 0.0415, 0.1693), (-0.0519, 0.0277, 0.1729), (-0.026, 0.0139, 0.1751), (-0.0272, 0.0113, 0.1751), (-0.0543, 0.0225, 0.1729), (-0.0813, 0.0337, 0.1693), (-0.1081, 0.0448, 0.1643), (-0.1347, 0.0558, 0.1578), (-0.1609, 0.0667, 0.15), (-0.1867, 0.0774, 0.1407), (-0.2121, 0.0879, 0.1301), (-0.237, 0.0982, 0.1182), (-0.2613, 0.1082, 0.1049), (-0.285, 0.118, 0.0904), (-0.308, 0.1276, 0.0747), (-0.3302, 0.1368, 0.0577), (-0.3517, 0.1457, 0.0396), (-0.3723, 0.1542, 0.0204), (-0.392, 0.1624, 0.0001), (-0.4107, 0.1701, -0.0213), (-0.4285, 0.1775, -0.0436), (-0.4438, 0.1346, -0.0436), (-0.4254, 0.1291, -0.0213), (-0.406, 0.1232, 0.0001), (-0.3856, 0.117, 0.0204), (-0.3642, 0.1105, 0.0396), (-0.342, 0.1038, 0.0577), (-0.319, 0.0968, 0.0747), (-0.2952, 0.0895, 0.0904), (-0.2707, 0.0821, 0.1049), (-0.2455, 0.0745, 0.1182), (-0.2197, 0.0667, 0.1301), (-0.1934, 0.0587, 0.1407), (-0.1667, 0.0506, 0.15), (-0.1395, 0.0423, 0.1578), (-0.112, 0.034, 0.1643), (-0.0842, 0.0256, 0.1693), (-0.0563, 0.0171, 0.1729), (-0.0282, 0.0085, 0.1751), (-0.0289, 0.0057, 0.1751), (-0.0577, 0.0115, 0.1729), (-0.0863, 0.0172, 0.1693), (-0.1148, 0.0228, 0.1643), (-0.143, 0.0284, 0.1578), (-0.1708, 0.034, 0.15), (-0.1982, 0.0394, 0.1407), (-0.2252, 0.0448, 0.1301), (-0.2516, 0.05, 0.1182), (-0.2774, 0.0552, 0.1049), (-0.3025, 0.0602, 0.0904), (-0.3269, 0.065, 0.0747), (-0.3506, 0.0697, 0.0577), (-0.3733, 0.0743, 0.0396), (-0.3952, 0.0786, 0.0204), (-0.4161, 0.0828, 0.0001), (-0.436, 0.0867, -0.0213), (-0.4549, 0.0905, -0.0436), (-0.4616, 0.0455, -0.0436), (-0.4424, 0.0436, -0.0213), (-0.4222, 0.0416, 0.0001), (-0.401, 0.0395, 0.0204), (-0.3788, 0.0373, 0.0396), (-0.3557, 0.035, 0.0577), (-0.3317, 0.0327, 0.0747), (-0.307, 0.0302, 0.0904), (-0.2815, 0.0277, 0.1049), (-0.2553, 0.0251, 0.1182), (-0.2285, 0.0225, 0.1301), (-0.2012, 0.0198, 0.1407), (-0.1733, 0.0171, 0.15), (-0.1451, 0.0143, 0.1578), (-0.1165, 0.0115, 0.1643), (-0.0876, 0.0086, 0.1693), (-0.0585, 0.0058, 0.1729), (-0.0293, 0.0029, 0.1751), (-0.0294, -0.0, 0.1751), (-0.0588, -0.0, 0.1729), (-0.088, 0.0, 0.1693), (-0.1171, 0.0, 0.1643), (-0.1458, -0.0, 0.1578), (-0.1742, -0.0, 0.15), (-0.2021, -0.0, 0.1407), (-0.2296, 0.0, 0.1301), (-0.2565, 0.0, 0.1182), (-0.2828, -0.0, 0.1049), (-0.3085, -0.0, 0.0904), (-0.3333, 0.0, 0.0747), (-0.3574, -0.0, 0.0577), (-0.3806, 0.0, 0.0396), (-0.4029, 0.0, 0.0204), (-0.4243, -0.0, 0.0001), (-0.4446, -0.0, -0.0213), (-0.4638, -0.0, -0.0436), (-0.4616, -0.0455, -0.0436), (-0.4424, -0.0436, -0.0213), (-0.4222, -0.0416, 0.0001), (-0.401, -0.0395, 0.0204), (-0.3788, -0.0373, 0.0396), (-0.3557, -0.035, 0.0577), (-0.3317, -0.0327, 0.0747), (-0.307, -0.0302, 0.0904), (-0.2815, -0.0277, 0.1049), (-0.2553, -0.0251, 0.1182), (-0.2285, -0.0225, 0.1301), (-0.2012, -0.0198, 0.1407), (-0.1733, -0.0171, 0.15), (-0.1451, -0.0143, 0.1578), (-0.1165, -0.0115, 0.1643), (-0.0876, -0.0086, 0.1693), (-0.0585, -0.0058, 0.1729), (-0.0293, -0.0029, 0.1751), (-0.0289, -0.0057, 0.1751), (-0.0577, -0.0115, 0.1729), (-0.0863, -0.0172, 0.1693), (-0.1148, -0.0228, 0.1643), (-0.143, -0.0284, 0.1578), (-0.1708, -0.034, 0.15), (-0.1982, -0.0394, 0.1407), (-0.2252, -0.0448, 0.1301), (-0.2516, -0.05, 0.1182), (-0.2774, -0.0552, 0.1049), (-0.3025, -0.0602, 0.0904), (-0.3269, -0.065, 0.0747), (-0.3506, -0.0697, 0.0577), (-0.3733, -0.0743, 0.0396), (-0.3952, -0.0786, 0.0204), (-0.4161, -0.0828, 0.0001), (-0.436, -0.0867, -0.0213), (-0.4549, -0.0905, -0.0436), (-0.4438, -0.1346, -0.0436), (-0.4254, -0.1291, -0.0213), (-0.406, -0.1232, 0.0001), (-0.3856, -0.117, 0.0204), (-0.3642, -0.1105, 0.0396), (-0.342, -0.1038, 0.0577), (-0.319, -0.0968, 0.0747), (-0.2952, -0.0895, 0.0904), (-0.2707, -0.0821, 0.1049), (-0.2455, -0.0745, 0.1182), (-0.2197, -0.0667, 0.1301), (-0.1934, -0.0587, 0.1407), (-0.1667, -0.0506, 0.15), (-0.1395, -0.0423, 0.1578), (-0.112, -0.034, 0.1643), (-0.0842, -0.0256, 0.1693), (-0.0563, -0.0171, 0.1729), (-0.0282, -0.0085, 0.1751), (-0.0272, -0.0113, 0.1751), (-0.0543, -0.0225, 0.1729), (-0.0813, -0.0337, 0.1693), (-0.1081, -0.0448, 0.1643), (-0.1347, -0.0558, 0.1578), (-0.1609, -0.0667, 0.15), (-0.1867, -0.0774, 0.1407), (-0.2121, -0.0879, 0.1301), (-0.237, -0.0982, 0.1182), (-0.2613, -0.1082, 0.1049), (-0.285, -0.118, 0.0904), (-0.308, -0.1276, 0.0747), (-0.3302, -0.1368, 0.0577), (-0.3517, -0.1457, 0.0396), (-0.3723, -0.1542, 0.0204), (-0.392, -0.1624, 0.0001), (-0.4107, -0.1701, -0.0213), (-0.4285, -0.1775, -0.0436), (-0.409, -0.2186, -0.0436), (-0.3921, -0.2096, -0.0213), (-0.3742, -0.2, 0.0001), (-0.3554, -0.1899, 0.0204), (-0.3357, -0.1794, 0.0396), (-0.3152, -0.1685, 0.0577), (-0.294, -0.1571, 0.0747), (-0.272, -0.1454, 0.0904), (-0.2494, -0.1333, 0.1049), (-0.2262, -0.1209, 0.1182), (-0.2025, -0.1082, 0.1301), (-0.1783, -0.0953, 0.1407), (-0.1536, -0.0821, 0.15), (-0.1286, -0.0687, 0.1578), (-0.1032, -0.0552, 0.1643), (-0.0776, -0.0415, 0.1693), (-0.0519, -0.0277, 0.1729), (-0.026, -0.0139, 0.1751), (-0.0245, -0.0164, 0.1751), (-0.0489, -0.0327, 0.1729), (-0.0732, -0.0489, 0.1693), (-0.0973, -0.065, 0.1643), (-0.1212, -0.081, 0.1578), (-0.1448, -0.0968, 0.15), (-0.1681, -0.1123, 0.1407), (-0.1909, -0.1276, 0.1301), (-0.2133, -0.1425, 0.1182), (-0.2352, -0.1571, 0.1049), (-0.2565, -0.1714, 0.0904), (-0.2772, -0.1852, 0.0747), (-0.2972, -0.1986, 0.0577), (-0.3165, -0.2115, 0.0396), (-0.335, -0.2239, 0.0204), (-0.3528, -0.2357, 0.0001), (-0.3696, -0.247, -0.0213), (-0.3856, -0.2577, -0.0436), (-0.3585, -0.2942, -0.0436), (-0.3437, -0.282, -0.0213), (-0.328, -0.2692, 0.0001), (-0.3115, -0.2556, 0.0204), (-0.2942, -0.2415, 0.0396), (-0.2763, -0.2267, 0.0577), (-0.2577, -0.2115, 0.0747), (-0.2384, -0.1957, 0.0904), (-0.2186, -0.1794, 0.1049), (-0.1983, -0.1627, 0.1182), (-0.1775, -0.1457, 0.1301), (-0.1563, -0.1282, 0.1407), (-0.1346, -0.1105, 0.15), (-0.1127, -0.0925, 0.1578), (-0.0905, -0.0743, 0.1643), (-0.0681, -0.0559, 0.1693), (-0.0455, -0.0373, 0.1729), (-0.0228, -0.0187, 0.1751), (-0.0208, -0.0208, 0.1751), (-0.0416, -0.0416, 0.1729), (-0.0623, -0.0623, 0.1693), (-0.0828, -0.0828, 0.1643), (-0.1031, -0.1031, 0.1578), (-0.1232, -0.1232, 0.15), (-0.1429, -0.1429, 0.1407), (-0.1624, -0.1624, 0.1301), (-0.1814, -0.1814, 0.1182), (-0.2, -0.2, 0.1049), (-0.2181, -0.2181, 0.0904), (-0.2357, -0.2357, 0.0747), (-0.2527, -0.2527, 0.0577), (-0.2692, -0.2692, 0.0396), (-0.2849, -0.2849, 0.0204), (-0.3, -0.3, 0.0001), (-0.3144, -0.3144, -0.0213), (-0.328, -0.328, -0.0436), (-0.2942, -0.3585, -0.0436), (-0.282, -0.3437, -0.0213), (-0.2692, -0.328, 0.0001), (-0.2556, -0.3115, 0.0204), (-0.2415, -0.2942, 0.0396), (-0.2267, -0.2763, 0.0577), (-0.2115, -0.2577, 0.0747), (-0.1957, -0.2384, 0.0904), (-0.1794, -0.2186, 0.1049), (-0.1627, -0.1983, 0.1182), (-0.1457, -0.1775, 0.1301), (-0.1282, -0.1563, 0.1407), (-0.1105, -0.1346, 0.15), (-0.0925, -0.1127, 0.1578), (-0.0743, -0.0905, 0.1643), (-0.0559, -0.0681, 0.1693), (-0.0373, -0.0455, 0.1729), (-0.0187, -0.0228, 0.1751), (-0.0164, -0.0245, 0.1751), (-0.0327, -0.0489, 0.1729), (-0.0489, -0.0732, 0.1693), (-0.065, -0.0973, 0.1643), (-0.081, -0.1212, 0.1578), (-0.0968, -0.1448, 0.15), (-0.1123, -0.1681, 0.1407), (-0.1276, -0.1909, 0.1301), (-0.1425, -0.2133, 0.1182), (-0.1571, -0.2352, 0.1049), (-0.1714, -0.2565, 0.0904), (-0.1852, -0.2772, 0.0747), (-0.1986, -0.2972, 0.0577), (-0.2115, -0.3165, 0.0396), (-0.2239, -0.335, 0.0204), (-0.2357, -0.3528, 0.0001), (-0.247, -0.3696, -0.0213), (-0.2577, -0.3856, -0.0436), (-0.2186, -0.409, -0.0436), (-0.2096, -0.3921, -0.0213), (-0.2, -0.3742, 0.0001), (-0.1899, -0.3554, 0.0204), (-0.1794, -0.3357, 0.0396), (-0.1685, -0.3152, 0.0577), (-0.1571, -0.294, 0.0747), (-0.1454, -0.272, 0.0904), (-0.1333, -0.2494, 0.1049), (-0.1209, -0.2262, 0.1182), (-0.1082, -0.2025, 0.1301), (-0.0953, -0.1783, 0.1407), (-0.0821, -0.1536, 0.15), (-0.0687, -0.1286, 0.1578), (-0.0552, -0.1032, 0.1643), (-0.0415, -0.0776, 0.1693), (-0.0277, -0.0519, 0.1729), (-0.0139, -0.026, 0.1751), (-0.0113, -0.0272, 0.1751), (-0.0225, -0.0543, 0.1729), (-0.0337, -0.0813, 0.1693), (-0.0448, -0.1081, 0.1643), (-0.0558, -0.1347, 0.1578), (-0.0667, -0.1609, 0.15), (-0.0774, -0.1867, 0.1407), (-0.0879, -0.2121, 0.1301), (-0.0982, -0.237, 0.1182), (-0.1082, -0.2613, 0.1049), (-0.118, -0.285, 0.0904), (-0.1276, -0.308, 0.0747), (-0.1368, -0.3302, 0.0577), (-0.1457, -0.3517, 0.0396), (-0.1542, -0.3723, 0.0204), (-0.1624, -0.392, 0.0001), (-0.1701, -0.4107, -0.0213), (-0.1775, -0.4285, -0.0436), (-0.1346, -0.4438, -0.0436), (-0.1291, -0.4254, -0.0213), (-0.1232, -0.406, 0.0001), (-0.117, -0.3856, 0.0204), (-0.1105, -0.3642, 0.0396), (-0.1038, -0.342, 0.0577), (-0.0968, -0.319, 0.0747), (-0.0895, -0.2952, 0.0904), (-0.0821, -0.2707, 0.1049), (-0.0745, -0.2455, 0.1182), (-0.0667, -0.2197, 0.1301), (-0.0587, -0.1934, 0.1407), (-0.0506, -0.1667, 0.15), (-0.0423, -0.1395, 0.1578), (-0.034, -0.112, 0.1643), (-0.0256, -0.0842, 0.1693), (-0.0171, -0.0563, 0.1729), (-0.0085, -0.0282, 0.1751), (-0.0057, -0.0289, 0.1751), (-0.0115, -0.0577, 0.1729), (-0.0172, -0.0863, 0.1693), (-0.0228, -0.1148, 0.1643), (-0.0284, -0.143, 0.1578), (-0.034, -0.1708, 0.15), (-0.0394, -0.1982, 0.1407), (-0.0448, -0.2252, 0.1301), (-0.05, -0.2516, 0.1182), (-0.0552, -0.2774, 0.1049), (-0.0602, -0.3025, 0.0904), (-0.065, -0.3269, 0.0747), (-0.0697, -0.3506, 0.0577), (-0.0743, -0.3733, 0.0396), (-0.0786, -0.3952, 0.0204), (-0.0828, -0.4161, 0.0001), (-0.0867, -0.436, -0.0213), (-0.0905, -0.4549, -0.0436), (-0.0455, -0.4616, -0.0436), (-0.0436, -0.4424, -0.0213), (-0.0416, -0.4222, 0.0001), (-0.0395, -0.401, 0.0204), (-0.0373, -0.3788, 0.0396), (-0.035, -0.3557, 0.0577), (-0.0327, -0.3317, 0.0747), (-0.0302, -0.307, 0.0904), (-0.0277, -0.2815, 0.1049), (-0.0251, -0.2553, 0.1182), (-0.0225, -0.2285, 0.1301), (-0.0198, -0.2012, 0.1407), (-0.0171, -0.1733, 0.15), (-0.0143, -0.1451, 0.1578), (-0.0115, -0.1165, 0.1643), (-0.0086, -0.0876, 0.1693), (-0.0058, -0.0585, 0.1729), (-0.0029, -0.0293, 0.1751), (0.0, -0.0294, 0.1751), (0.0, -0.0588, 0.1729), (-0.0, -0.088, 0.1693), (-0.0, -0.1171, 0.1643), (0.0, -0.1458, 0.1578), (0.0, -0.1742, 0.15), (0.0, -0.2021, 0.1407), (0.0, -0.2296, 0.1301), (-0.0, -0.2565, 0.1182), (-0.0, -0.2828, 0.1049), (0.0, -0.3085, 0.0904), (-0.0, -0.3333, 0.0747), (0.0, -0.3574, 0.0577), (-0.0, -0.3806, 0.0396), (0.0, -0.4029, 0.0204), (0.0, -0.4243, 0.0001), (0.0, -0.4446, -0.0213), (0.0, -0.4638, -0.0436), (0.0455, -0.4616, -0.0436), (0.0436, -0.4424, -0.0213), (0.0416, -0.4222, 0.0001), (0.0395, -0.401, 0.0204), (0.0373, -0.3788, 0.0396), (0.035, -0.3557, 0.0577), (0.0327, -0.3317, 0.0747), (0.0302, -0.307, 0.0904), (0.0277, -0.2815, 0.1049), (0.0251, -0.2553, 0.1182), (0.0225, -0.2285, 0.1301), (0.0198, -0.2012, 0.1407), (0.0171, -0.1733, 0.15), (0.0143, -0.1451, 0.1578), (0.0115, -0.1165, 0.1643), (0.0086, -0.0876, 0.1693), (0.0058, -0.0585, 0.1729), (0.0029, -0.0293, 0.1751), (0.0, 0.0, 0.1758), (0.0057, -0.0289, 0.1751), (0.0115, -0.0577, 0.1729), (0.0172, -0.0863, 0.1693), (0.0228, -0.1148, 0.1643), (0.0284, -0.143, 0.1578), (0.034, -0.1708, 0.15), (0.0394, -0.1982, 0.1407), (0.0448, -0.2252, 0.1301), (0.05, -0.2516, 0.1182), (0.0552, -0.2774, 0.1049), (0.0602, -0.3025, 0.0904), (0.065, -0.3269, 0.0747), (0.0697, -0.3506, 0.0577), (0.0743, -0.3733, 0.0396), (0.0786, -0.3952, 0.0204), (0.0828, -0.4161, 0.0001), (0.0867, -0.436, -0.0213), (0.0905, -0.4549, -0.0436), (0.1346, -0.4438, -0.0436), (0.1291, -0.4254, -0.0213), (0.1232, -0.406, 0.0001), (0.117, -0.3856, 0.0204), (0.1105, -0.3642, 0.0396), (0.1038, -0.342, 0.0577), (0.0968, -0.319, 0.0747), (0.0895, -0.2952, 0.0904), (0.0821, -0.2707, 0.1049), (0.0745, -0.2455, 0.1182), (0.0667, -0.2197, 0.1301), (0.0587, -0.1934, 0.1407), (0.0506, -0.1667, 0.15), (0.0423, -0.1395, 0.1578), (0.034, -0.112, 0.1643), (0.0256, -0.0842, 0.1693), (0.0171, -0.0563, 0.1729), (0.0085, -0.0282, 0.1751), (0.0113, -0.0272, 0.1751), (0.0225, -0.0543, 0.1729), (0.0337, -0.0813, 0.1693), (0.0448, -0.1081, 0.1643), (0.0558, -0.1347, 0.1578), (0.0667, -0.1609, 0.15), (0.0774, -0.1867, 0.1407), (0.0879, -0.2121, 0.1301), (0.0982, -0.237, 0.1182), (0.1082, -0.2613, 0.1049), (0.118, -0.285, 0.0904), (0.1276, -0.308, 0.0747), (0.1368, -0.3302, 0.0577), (0.1457, -0.3517, 0.0396), (0.1542, -0.3723, 0.0204), (0.1624, -0.392, 0.0001), (0.1701, -0.4107, -0.0213), (0.1775, -0.4285, -0.0436), (0.2186, -0.409, -0.0436), (0.2096, -0.3921, -0.0213), (0.2, -0.3742, 0.0001), (0.1899, -0.3554, 0.0204), (0.1794, -0.3357, 0.0396), (0.1685, -0.3152, 0.0577), (0.1571, -0.294, 0.0747), (0.1454, -0.272, 0.0904), (0.1333, -0.2494, 0.1049), (0.1209, -0.2262, 0.1182), (0.1082, -0.2025, 0.1301), (0.0953, -0.1783, 0.1407), (0.0821, -0.1536, 0.15), (0.0687, -0.1286, 0.1578), (0.0552, -0.1032, 0.1643), (0.0415, -0.0776, 0.1693), (0.0277, -0.0519, 0.1729), (0.0139, -0.026, 0.1751), (0.0164, -0.0245, 0.1751), (0.0327, -0.0489, 0.1729), (0.0489, -0.0732, 0.1693), (0.065, -0.0973, 0.1643), (0.081, -0.1212, 0.1578), (0.0968, -0.1448, 0.15), (0.1123, -0.1681, 0.1407), (0.1276, -0.1909, 0.1301), (0.1425, -0.2133, 0.1182), (0.1571, -0.2352, 0.1049), (0.1714, -0.2565, 0.0904), (0.1852, -0.2772, 0.0747), (0.1986, -0.2972, 0.0577), (0.2115, -0.3165, 0.0396), (0.2239, -0.335, 0.0204), (0.2357, -0.3528, 0.0001), (0.247, -0.3696, -0.0213), (0.2577, -0.3856, -0.0436), (0.2942, -0.3585, -0.0436), (0.282, -0.3437, -0.0213), (0.2692, -0.328, 0.0001), (0.2556, -0.3115, 0.0204), (0.2415, -0.2942, 0.0396), (0.2267, -0.2763, 0.0577), (0.2115, -0.2577, 0.0747), (0.1957, -0.2384, 0.0904), (0.1794, -0.2186, 0.1049), (0.1627, -0.1983, 0.1182), (0.1457, -0.1775, 0.1301), (0.1282, -0.1563, 0.1407), (0.1105, -0.1346, 0.15), (0.0925, -0.1127, 0.1578), (0.0743, -0.0905, 0.1643), (0.0559, -0.0681, 0.1693), (0.0373, -0.0455, 0.1729), (0.0187, -0.0228, 0.1751), (0.0208, -0.0208, 0.1751), (0.0416, -0.0416, 0.1729), (0.0623, -0.0623, 0.1693), (0.0828, -0.0828, 0.1643), (0.1031, -0.1031, 0.1578), (0.1232, -0.1232, 0.15), (0.1429, -0.1429, 0.1407), (0.1624, -0.1624, 0.1301), (0.1814, -0.1814, 0.1182), (0.2, -0.2, 0.1049), (0.2181, -0.2181, 0.0904), (0.2357, -0.2357, 0.0747), (0.2527, -0.2527, 0.0577), (0.2692, -0.2692, 0.0396), (0.2849, -0.2849, 0.0204), (0.3, -0.3, 0.0001), (0.3144, -0.3144, -0.0213), (0.328, -0.328, -0.0436), (0.3585, -0.2942, -0.0436), (0.3437, -0.282, -0.0213), (0.328, -0.2692, 0.0001), (0.3115, -0.2556, 0.0204), (0.2942, -0.2415, 0.0396), (0.2763, -0.2267, 0.0577), (0.2577, -0.2115, 0.0747), (0.2384, -0.1957, 0.0904), (0.2186, -0.1794, 0.1049), (0.1983, -0.1627, 0.1182), (0.1775, -0.1457, 0.1301), (0.1563, -0.1282, 0.1407), (0.1346, -0.1105, 0.15), (0.1127, -0.0925, 0.1578), (0.0905, -0.0743, 0.1643), (0.0681, -0.0559, 0.1693), (0.0455, -0.0373, 0.1729), (0.0228, -0.0187, 0.1751), (0.0245, -0.0164, 0.1751), (0.0489, -0.0327, 0.1729), (0.0732, -0.0489, 0.1693), (0.0973, -0.065, 0.1643), (0.1212, -0.081, 0.1578), (0.1448, -0.0968, 0.15), (0.1681, -0.1123, 0.1407), (0.1909, -0.1276, 0.1301), (0.2133, -0.1425, 0.1182), (0.2352, -0.1571, 0.1049), (0.2565, -0.1714, 0.0904), (0.2772, -0.1852, 0.0747), (0.2972, -0.1986, 0.0577), (0.3165, -0.2115, 0.0396), (0.335, -0.2239, 0.0204), (0.3528, -0.2357, 0.0001), (0.3696, -0.247, -0.0213), (0.3856, -0.2577, -0.0436), (0.409, -0.2186, -0.0436), (0.3921, -0.2096, -0.0213), (0.3742, -0.2, 0.0001), (0.3554, -0.1899, 0.0204), (0.3357, -0.1794, 0.0396), (0.3152, -0.1685, 0.0577), (0.294, -0.1571, 0.0747), (0.272, -0.1454, 0.0904), (0.2494, -0.1333, 0.1049), (0.2262, -0.1209, 0.1182), (0.2025, -0.1082, 0.1301), (0.1783, -0.0953, 0.1407), (0.1536, -0.0821, 0.15), (0.1286, -0.0687, 0.1578), (0.1032, -0.0552, 0.1643), (0.0776, -0.0415, 0.1693), (0.0519, -0.0277, 0.1729), (0.026, -0.0139, 0.1751), (0.0272, -0.0113, 0.1751), (0.0543, -0.0225, 0.1729), (0.0813, -0.0337, 0.1693), (0.1081, -0.0448, 0.1643), (0.1347, -0.0558, 0.1578), (0.1609, -0.0667, 0.15), (0.1867, -0.0774, 0.1407), (0.2121, -0.0879, 0.1301), (0.237, -0.0982, 0.1182), (0.2613, -0.1082, 0.1049), (0.285, -0.118, 0.0904), (0.308, -0.1276, 0.0747), (0.3302, -0.1368, 0.0577), (0.3517, -0.1457, 0.0396), (0.3723, -0.1542, 0.0204), (0.392, -0.1624, 0.0001), (0.4107, -0.1701, -0.0213), (0.4285, -0.1775, -0.0436), (0.4438, -0.1346, -0.0436), (0.4254, -0.1291, -0.0213), (0.406, -0.1232, 0.0001), (0.3856, -0.117, 0.0204), (0.3642, -0.1105, 0.0396), (0.342, -0.1038, 0.0577), (0.319, -0.0968, 0.0747), (0.2952, -0.0895, 0.0904), (0.2707, -0.0821, 0.1049), (0.2455, -0.0745, 0.1182), (0.2197, -0.0667, 0.1301), (0.1934, -0.0587, 0.1407), (0.1667, -0.0506, 0.15), (0.1395, -0.0423, 0.1578), (0.112, -0.034, 0.1643), (0.0842, -0.0256, 0.1693), (0.0563, -0.0171, 0.1729), (0.0282, -0.0085, 0.1751), (0.0289, -0.0057, 0.1751), (0.0577, -0.0115, 0.1729), (0.0863, -0.0172, 0.1693), (0.1148, -0.0228, 0.1643), (0.143, -0.0284, 0.1578), (0.1708, -0.034, 0.15), (0.1982, -0.0394, 0.1407), (0.2252, -0.0448, 0.1301), (0.2516, -0.05, 0.1182), (0.2774, -0.0552, 0.1049), (0.3025, -0.0602, 0.0904), (0.3269, -0.065, 0.0747), (0.3506, -0.0697, 0.0577), (0.3733, -0.0743, 0.0396), (0.3952, -0.0786, 0.0204), (0.4161, -0.0828, 0.0001), (0.436, -0.0867, -0.0213), (0.4549, -0.0905, -0.0436), (0.4616, -0.0455, -0.0436), (0.4424, -0.0436, -0.0213), (0.4222, -0.0416, 0.0001), (0.401, -0.0395, 0.0204), (0.3788, -0.0373, 0.0396), (0.3557, -0.035, 0.0577), (0.3317, -0.0327, 0.0747), (0.307, -0.0302, 0.0904), (0.2815, -0.0277, 0.1049), (0.2553, -0.0251, 0.1182), (0.2285, -0.0225, 0.1301), (0.2012, -0.0198, 0.1407), (0.1733, -0.0171, 0.15), (0.1451, -0.0143, 0.1578), (0.1165, -0.0115, 0.1643), (0.0876, -0.0086, 0.1693), (0.0585, -0.0058, 0.1729), (0.0293, -0.0029, 0.1751), (0.0588, 0.0, 0.1729), (0.088, 0.0, 0.1693), (0.1171, 0.0, 0.1643), (0.1458, 0.0, 0.1578), (0.1742, 0.0, 0.15), (0.2021, 0.0, 0.1407), (0.2296, 0.0, 0.1301), (0.2565, -0.0, 0.1182), (0.2828, 0.0, 0.1049), (0.3085, 0.0, 0.0904), (0.3574, 0.0, 0.0577), (0.3806, -0.0, 0.0396), (0.4029, 0.0, 0.0204), (0.4243, 0.0, 0.0001), (0.4446, 0.0, -0.0213), (0.4638, 0.0, -0.0436)]
		#faces = [[1152, 2, 3, 1151], [1151, 3, 4, 1150], [1150, 4, 5, 1149], [1149, 5, 6, 1148], [1148, 6, 7, 1147], [1147, 7, 8, 1], [1, 8, 9, 1146], [1146, 9, 10, 1145], [1145, 10, 11, 1144], [1144, 11, 12, 1143], [1143, 12, 13, 1142], [1142, 13, 14, 1141], [1141, 14, 15, 1140], [1140, 15, 16, 1139], [1139, 16, 17, 1138], [1138, 17, 18, 1137], [19, 0, 1137, 18], [0, 19, 884], [19, 20, 884], [18, 21, 20, 19], [17, 22, 21, 18], [16, 23, 22, 17], [15, 24, 23, 16], [14, 25, 24, 15], [13, 26, 25, 14], [12, 27, 26, 13], [11, 28, 27, 12], [10, 29, 28, 11], [9, 30, 29, 10], [8, 31, 30, 9], [7, 32, 31, 8], [6, 33, 32, 7], [5, 34, 33, 6], [4, 35, 34, 5], [3, 36, 35, 4], [2, 37, 36, 3], [37, 38, 39, 36], [36, 39, 40, 35], [35, 40, 41, 34], [34, 41, 42, 33], [33, 42, 43, 32], [32, 43, 44, 31], [31, 44, 45, 30], [30, 45, 46, 29], [29, 46, 47, 28], [28, 47, 48, 27], [27, 48, 49, 26], [26, 49, 50, 25], [25, 50, 51, 24], [24, 51, 52, 23], [23, 52, 53, 22], [22, 53, 54, 21], [21, 54, 55, 20], [20, 55, 884], [55, 56, 884], [54, 57, 56, 55], [53, 58, 57, 54], [52, 59, 58, 53], [51, 60, 59, 52], [50, 61, 60, 51], [49, 62, 61, 50], [48, 63, 62, 49], [47, 64, 63, 48], [46, 65, 64, 47], [45, 66, 65, 46], [44, 67, 66, 45], [43, 68, 67, 44], [42, 69, 68, 43], [41, 70, 69, 42], [40, 71, 70, 41], [39, 72, 71, 40], [38, 73, 72, 39], [73, 74, 75, 72], [72, 75, 76, 71], [71, 76, 77, 70], [70, 77, 78, 69], [69, 78, 79, 68], [68, 79, 80, 67], [67, 80, 81, 66], [66, 81, 82, 65], [65, 82, 83, 64], [64, 83, 84, 63], [63, 84, 85, 62], [62, 85, 86, 61], [61, 86, 87, 60], [60, 87, 88, 59], [59, 88, 89, 58], [58, 89, 90, 57], [57, 90, 91, 56], [56, 91, 884], [91, 92, 884], [90, 93, 92, 91], [89, 94, 93, 90], [88, 95, 94, 89], [87, 96, 95, 88], [86, 97, 96, 87], [85, 98, 97, 86], [84, 99, 98, 85], [83, 100, 99, 84], [82, 101, 100, 83], [81, 102, 101, 82], [80, 103, 102, 81], [79, 104, 103, 80], [78, 105, 104, 79], [77, 106, 105, 78], [76, 107, 106, 77], [75, 108, 107, 76], [74, 109, 108, 75], [109, 110, 111, 108], [108, 111, 112, 107], [107, 112, 113, 106], [106, 113, 114, 105], [105, 114, 115, 104], [104, 115, 116, 103], [103, 116, 117, 102], [102, 117, 118, 101], [101, 118, 119, 100], [100, 119, 120, 99], [99, 120, 121, 98], [98, 121, 122, 97], [97, 122, 123, 96], [96, 123, 124, 95], [95, 124, 125, 94], [94, 125, 126, 93], [93, 126, 127, 92], [92, 127, 884], [127, 128, 884], [126, 129, 128, 127], [125, 130, 129, 126], [124, 131, 130, 125], [123, 132, 131, 124], [122, 133, 132, 123], [121, 134, 133, 122], [120, 135, 134, 121], [119, 136, 135, 120], [118, 137, 136, 119], [117, 138, 137, 118], [116, 139, 138, 117], [115, 140, 139, 116], [114, 141, 140, 115], [113, 142, 141, 114], [112, 143, 142, 113], [111, 144, 143, 112], [110, 145, 144, 111], [145, 146, 147, 144], [144, 147, 148, 143], [143, 148, 149, 142], [142, 149, 150, 141], [141, 150, 151, 140], [140, 151, 152, 139], [139, 152, 153, 138], [138, 153, 154, 137], [137, 154, 155, 136], [136, 155, 156, 135], [135, 156, 157, 134], [134, 157, 158, 133], [133, 158, 159, 132], [132, 159, 160, 131], [131, 160, 161, 130], [130, 161, 162, 129], [129, 162, 163, 128], [128, 163, 884], [163, 164, 884], [162, 165, 164, 163], [161, 166, 165, 162], [160, 167, 166, 161], [159, 168, 167, 160], [158, 169, 168, 159], [157, 170, 169, 158], [156, 171, 170, 157], [155, 172, 171, 156], [154, 173, 172, 155], [153, 174, 173, 154], [152, 175, 174, 153], [151, 176, 175, 152], [150, 177, 176, 151], [149, 178, 177, 150], [148, 179, 178, 149], [147, 180, 179, 148], [146, 181, 180, 147], [181, 182, 183, 180], [180, 183, 184, 179], [179, 184, 185, 178], [178, 185, 186, 177], [177, 186, 187, 176], [176, 187, 188, 175], [175, 188, 189, 174], [174, 189, 190, 173], [173, 190, 191, 172], [172, 191, 192, 171], [171, 192, 193, 170], [170, 193, 194, 169], [169, 194, 195, 168], [168, 195, 196, 167], [167, 196, 197, 166], [166, 197, 198, 165], [165, 198, 199, 164], [164, 199, 884], [199, 200, 884], [198, 201, 200, 199], [197, 202, 201, 198], [196, 203, 202, 197], [195, 204, 203, 196], [194, 205, 204, 195], [193, 206, 205, 194], [192, 207, 206, 193], [191, 208, 207, 192], [190, 209, 208, 191], [189, 210, 209, 190], [188, 211, 210, 189], [187, 212, 211, 188], [186, 213, 212, 187], [185, 214, 213, 186], [184, 215, 214, 185], [183, 216, 215, 184], [182, 217, 216, 183], [217, 218, 219, 216], [216, 219, 220, 215], [215, 220, 221, 214], [214, 221, 222, 213], [213, 222, 223, 212], [212, 223, 224, 211], [211, 224, 225, 210], [210, 225, 226, 209], [209, 226, 227, 208], [208, 227, 228, 207], [207, 228, 229, 206], [206, 229, 230, 205], [205, 230, 231, 204], [204, 231, 232, 203], [203, 232, 233, 202], [202, 233, 234, 201], [201, 234, 235, 200], [200, 235, 884], [235, 236, 884], [234, 237, 236, 235], [233, 238, 237, 234], [232, 239, 238, 233], [231, 240, 239, 232], [230, 241, 240, 231], [229, 242, 241, 230], [228, 243, 242, 229], [227, 244, 243, 228], [226, 245, 244, 227], [225, 246, 245, 226], [224, 247, 246, 225], [223, 248, 247, 224], [222, 249, 248, 223], [221, 250, 249, 222], [220, 251, 250, 221], [219, 252, 251, 220], [218, 253, 252, 219], [253, 254, 255, 252], [252, 255, 256, 251], [251, 256, 257, 250], [250, 257, 258, 249], [249, 258, 259, 248], [248, 259, 260, 247], [247, 260, 261, 246], [246, 261, 262, 245], [245, 262, 263, 244], [244, 263, 264, 243], [243, 264, 265, 242], [242, 265, 266, 241], [241, 266, 267, 240], [240, 267, 268, 239], [239, 268, 269, 238], [238, 269, 270, 237], [237, 270, 271, 236], [236, 271, 884], [271, 272, 884], [270, 273, 272, 271], [269, 274, 273, 270], [268, 275, 274, 269], [267, 276, 275, 268], [266, 277, 276, 267], [265, 278, 277, 266], [264, 279, 278, 265], [263, 280, 279, 264], [262, 281, 280, 263], [261, 282, 281, 262], [260, 283, 282, 261], [259, 284, 283, 260], [258, 285, 284, 259], [257, 286, 285, 258], [256, 287, 286, 257], [255, 288, 287, 256], [254, 289, 288, 255], [289, 290, 291, 288], [288, 291, 292, 287], [287, 292, 293, 286], [286, 293, 294, 285], [285, 294, 295, 284], [284, 295, 296, 283], [283, 296, 297, 282], [282, 297, 298, 281], [281, 298, 299, 280], [280, 299, 300, 279], [279, 300, 301, 278], [278, 301, 302, 277], [277, 302, 303, 276], [276, 303, 304, 275], [275, 304, 305, 274], [274, 305, 306, 273], [273, 306, 307, 272], [272, 307, 884], [307, 308, 884], [306, 309, 308, 307], [305, 310, 309, 306], [304, 311, 310, 305], [303, 312, 311, 304], [302, 313, 312, 303], [301, 314, 313, 302], [300, 315, 314, 301], [299, 316, 315, 300], [298, 317, 316, 299], [297, 318, 317, 298], [296, 319, 318, 297], [295, 320, 319, 296], [294, 321, 320, 295], [293, 322, 321, 294], [292, 323, 322, 293], [291, 324, 323, 292], [290, 325, 324, 291], [325, 326, 327, 324], [324, 327, 328, 323], [323, 328, 329, 322], [322, 329, 330, 321], [321, 330, 331, 320], [320, 331, 332, 319], [319, 332, 333, 318], [318, 333, 334, 317], [317, 334, 335, 316], [316, 335, 336, 315], [315, 336, 337, 314], [314, 337, 338, 313], [313, 338, 339, 312], [312, 339, 340, 311], [311, 340, 341, 310], [310, 341, 342, 309], [309, 342, 343, 308], [308, 343, 884], [343, 344, 884], [342, 345, 344, 343], [341, 346, 345, 342], [340, 347, 346, 341], [339, 348, 347, 340], [338, 349, 348, 339], [337, 350, 349, 338], [336, 351, 350, 337], [335, 352, 351, 336], [334, 353, 352, 335], [333, 354, 353, 334], [332, 355, 354, 333], [331, 356, 355, 332], [330, 357, 356, 331], [329, 358, 357, 330], [328, 359, 358, 329], [327, 360, 359, 328], [326, 361, 360, 327], [361, 362, 363, 360], [360, 363, 364, 359], [359, 364, 365, 358], [358, 365, 366, 357], [357, 366, 367, 356], [356, 367, 368, 355], [355, 368, 369, 354], [354, 369, 370, 353], [353, 370, 371, 352], [352, 371, 372, 351], [351, 372, 373, 350], [350, 373, 374, 349], [349, 374, 375, 348], [348, 375, 376, 347], [347, 376, 377, 346], [346, 377, 378, 345], [345, 378, 379, 344], [344, 379, 884], [379, 380, 884], [378, 381, 380, 379], [377, 382, 381, 378], [376, 383, 382, 377], [375, 384, 383, 376], [374, 385, 384, 375], [373, 386, 385, 374], [372, 387, 386, 373], [371, 388, 387, 372], [370, 389, 388, 371], [369, 390, 389, 370], [368, 391, 390, 369], [367, 392, 391, 368], [366, 393, 392, 367], [365, 394, 393, 366], [364, 395, 394, 365], [363, 396, 395, 364], [362, 397, 396, 363], [397, 398, 399, 396], [396, 399, 400, 395], [395, 400, 401, 394], [394, 401, 402, 393], [393, 402, 403, 392], [392, 403, 404, 391], [391, 404, 405, 390], [390, 405, 406, 389], [389, 406, 407, 388], [388, 407, 408, 387], [387, 408, 409, 386], [386, 409, 410, 385], [385, 410, 411, 384], [384, 411, 412, 383], [383, 412, 413, 382], [382, 413, 414, 381], [381, 414, 415, 380], [380, 415, 884], [415, 416, 884], [414, 417, 416, 415], [413, 418, 417, 414], [412, 419, 418, 413], [411, 420, 419, 412], [410, 421, 420, 411], [409, 422, 421, 410], [408, 423, 422, 409], [407, 424, 423, 408], [406, 425, 424, 407], [405, 426, 425, 406], [404, 427, 426, 405], [403, 428, 427, 404], [402, 429, 428, 403], [401, 430, 429, 402], [400, 431, 430, 401], [399, 432, 431, 400], [398, 433, 432, 399], [433, 434, 435, 432], [432, 435, 436, 431], [431, 436, 437, 430], [430, 437, 438, 429], [429, 438, 439, 428], [428, 439, 440, 427], [427, 440, 441, 426], [426, 441, 442, 425], [425, 442, 443, 424], [424, 443, 444, 423], [423, 444, 445, 422], [422, 445, 446, 421], [421, 446, 447, 420], [420, 447, 448, 419], [419, 448, 449, 418], [418, 449, 450, 417], [417, 450, 451, 416], [416, 451, 884], [451, 452, 884], [450, 453, 452, 451], [449, 454, 453, 450], [448, 455, 454, 449], [447, 456, 455, 448], [446, 457, 456, 447], [445, 458, 457, 446], [444, 459, 458, 445], [443, 460, 459, 444], [442, 461, 460, 443], [441, 462, 461, 442], [440, 463, 462, 441], [439, 464, 463, 440], [438, 465, 464, 439], [437, 466, 465, 438], [436, 467, 466, 437], [435, 468, 467, 436], [434, 469, 468, 435], [469, 470, 471, 468], [468, 471, 472, 467], [467, 472, 473, 466], [466, 473, 474, 465], [465, 474, 475, 464], [464, 475, 476, 463], [463, 476, 477, 462], [462, 477, 478, 461], [461, 478, 479, 460], [460, 479, 480, 459], [459, 480, 481, 458], [458, 481, 482, 457], [457, 482, 483, 456], [456, 483, 484, 455], [455, 484, 485, 454], [454, 485, 486, 453], [453, 486, 487, 452], [452, 487, 884], [487, 488, 884], [486, 489, 488, 487], [485, 490, 489, 486], [484, 491, 490, 485], [483, 492, 491, 484], [482, 493, 492, 483], [481, 494, 493, 482], [480, 495, 494, 481], [479, 496, 495, 480], [478, 497, 496, 479], [477, 498, 497, 478], [476, 499, 498, 477], [475, 500, 499, 476], [474, 501, 500, 475], [473, 502, 501, 474], [472, 503, 502, 473], [471, 504, 503, 472], [470, 505, 504, 471], [505, 506, 507, 504], [504, 507, 508, 503], [503, 508, 509, 502], [502, 509, 510, 501], [501, 510, 511, 500], [500, 511, 512, 499], [499, 512, 513, 498], [498, 513, 514, 497], [497, 514, 515, 496], [496, 515, 516, 495], [495, 516, 517, 494], [494, 517, 518, 493], [493, 518, 519, 492], [492, 519, 520, 491], [491, 520, 521, 490], [490, 521, 522, 489], [489, 522, 523, 488], [488, 523, 884], [523, 524, 884], [522, 525, 524, 523], [521, 526, 525, 522], [520, 527, 526, 521], [519, 528, 527, 520], [518, 529, 528, 519], [517, 530, 529, 518], [516, 531, 530, 517], [515, 532, 531, 516], [514, 533, 532, 515], [513, 534, 533, 514], [512, 535, 534, 513], [511, 536, 535, 512], [510, 537, 536, 511], [509, 538, 537, 510], [508, 539, 538, 509], [507, 540, 539, 508], [506, 541, 540, 507], [541, 542, 543, 540], [540, 543, 544, 539], [539, 544, 545, 538], [538, 545, 546, 537], [537, 546, 547, 536], [536, 547, 548, 535], [535, 548, 549, 534], [534, 549, 550, 533], [533, 550, 551, 532], [532, 551, 552, 531], [531, 552, 553, 530], [530, 553, 554, 529], [529, 554, 555, 528], [528, 555, 556, 527], [527, 556, 557, 526], [526, 557, 558, 525], [525, 558, 559, 524], [524, 559, 884], [559, 560, 884], [558, 561, 560, 559], [557, 562, 561, 558], [556, 563, 562, 557], [555, 564, 563, 556], [554, 565, 564, 555], [553, 566, 565, 554], [552, 567, 566, 553], [551, 568, 567, 552], [550, 569, 568, 551], [549, 570, 569, 550], [548, 571, 570, 549], [547, 572, 571, 548], [546, 573, 572, 547], [545, 574, 573, 546], [544, 575, 574, 545], [543, 576, 575, 544], [542, 577, 576, 543], [577, 578, 579, 576], [576, 579, 580, 575], [575, 580, 581, 574], [574, 581, 582, 573], [573, 582, 583, 572], [572, 583, 584, 571], [571, 584, 585, 570], [570, 585, 586, 569], [569, 586, 587, 568], [568, 587, 588, 567], [567, 588, 589, 566], [566, 589, 590, 565], [565, 590, 591, 564], [564, 591, 592, 563], [563, 592, 593, 562], [562, 593, 594, 561], [561, 594, 595, 560], [560, 595, 884], [595, 596, 884], [594, 597, 596, 595], [593, 598, 597, 594], [592, 599, 598, 593], [591, 600, 599, 592], [590, 601, 600, 591], [589, 602, 601, 590], [588, 603, 602, 589], [587, 604, 603, 588], [586, 605, 604, 587], [585, 606, 605, 586], [584, 607, 606, 585], [583, 608, 607, 584], [582, 609, 608, 583], [581, 610, 609, 582], [580, 611, 610, 581], [579, 612, 611, 580], [578, 613, 612, 579], [613, 614, 615, 612], [612, 615, 616, 611], [611, 616, 617, 610], [610, 617, 618, 609], [609, 618, 619, 608], [608, 619, 620, 607], [607, 620, 621, 606], [606, 621, 622, 605], [605, 622, 623, 604], [604, 623, 624, 603], [603, 624, 625, 602], [602, 625, 626, 601], [601, 626, 627, 600], [600, 627, 628, 599], [599, 628, 629, 598], [598, 629, 630, 597], [597, 630, 631, 596], [596, 631, 884], [631, 632, 884], [630, 633, 632, 631], [629, 634, 633, 630], [628, 635, 634, 629], [627, 636, 635, 628], [626, 637, 636, 627], [625, 638, 637, 626], [624, 639, 638, 625], [623, 640, 639, 624], [622, 641, 640, 623], [621, 642, 641, 622], [620, 643, 642, 621], [619, 644, 643, 620], [618, 645, 644, 619], [617, 646, 645, 618], [616, 647, 646, 617], [615, 648, 647, 616], [614, 649, 648, 615], [649, 650, 651, 648], [648, 651, 652, 647], [647, 652, 653, 646], [646, 653, 654, 645], [645, 654, 655, 644], [644, 655, 656, 643], [643, 656, 657, 642], [642, 657, 658, 641], [641, 658, 659, 640], [640, 659, 660, 639], [639, 660, 661, 638], [638, 661, 662, 637], [637, 662, 663, 636], [636, 663, 664, 635], [635, 664, 665, 634], [634, 665, 666, 633], [633, 666, 667, 632], [632, 667, 884], [667, 668, 884], [666, 669, 668, 667], [665, 670, 669, 666], [664, 671, 670, 665], [663, 672, 671, 664], [662, 673, 672, 663], [661, 674, 673, 662], [660, 675, 674, 661], [659, 676, 675, 660], [658, 677, 676, 659], [657, 678, 677, 658], [656, 679, 678, 657], [655, 680, 679, 656], [654, 681, 680, 655], [653, 682, 681, 654], [652, 683, 682, 653], [651, 684, 683, 652], [650, 685, 684, 651], [685, 686, 687, 684], [684, 687, 688, 683], [683, 688, 689, 682], [682, 689, 690, 681], [681, 690, 691, 680], [680, 691, 692, 679], [679, 692, 693, 678], [678, 693, 694, 677], [677, 694, 695, 676], [676, 695, 696, 675], [675, 696, 697, 674], [674, 697, 698, 673], [673, 698, 699, 672], [672, 699, 700, 671], [671, 700, 701, 670], [670, 701, 702, 669], [669, 702, 703, 668], [668, 703, 884], [703, 704, 884], [702, 705, 704, 703], [701, 706, 705, 702], [700, 707, 706, 701], [699, 708, 707, 700], [698, 709, 708, 699], [697, 710, 709, 698], [696, 711, 710, 697], [695, 712, 711, 696], [694, 713, 712, 695], [693, 714, 713, 694], [692, 715, 714, 693], [691, 716, 715, 692], [690, 717, 716, 691], [689, 718, 717, 690], [688, 719, 718, 689], [687, 720, 719, 688], [686, 721, 720, 687], [721, 722, 723, 720], [720, 723, 724, 719], [719, 724, 725, 718], [718, 725, 726, 717], [717, 726, 727, 716], [716, 727, 728, 715], [715, 728, 729, 714], [714, 729, 730, 713], [713, 730, 731, 712], [712, 731, 732, 711], [711, 732, 733, 710], [710, 733, 734, 709], [709, 734, 735, 708], [708, 735, 736, 707], [707, 736, 737, 706], [706, 737, 738, 705], [705, 738, 739, 704], [704, 739, 884], [739, 740, 884], [738, 741, 740, 739], [737, 742, 741, 738], [736, 743, 742, 737], [735, 744, 743, 736], [734, 745, 744, 735], [733, 746, 745, 734], [732, 747, 746, 733], [731, 748, 747, 732], [730, 749, 748, 731], [729, 750, 749, 730], [728, 751, 750, 729], [727, 752, 751, 728], [726, 753, 752, 727], [725, 754, 753, 726], [724, 755, 754, 725], [723, 756, 755, 724], [722, 757, 756, 723], [757, 758, 759, 756], [756, 759, 760, 755], [755, 760, 761, 754], [754, 761, 762, 753], [753, 762, 763, 752], [752, 763, 764, 751], [751, 764, 765, 750], [750, 765, 766, 749], [749, 766, 767, 748], [748, 767, 768, 747], [747, 768, 769, 746], [746, 769, 770, 745], [745, 770, 771, 744], [744, 771, 772, 743], [743, 772, 773, 742], [742, 773, 774, 741], [741, 774, 775, 740], [740, 775, 884], [775, 776, 884], [774, 777, 776, 775], [773, 778, 777, 774], [772, 779, 778, 773], [771, 780, 779, 772], [770, 781, 780, 771], [769, 782, 781, 770], [768, 783, 782, 769], [767, 784, 783, 768], [766, 785, 784, 767], [765, 786, 785, 766], [764, 787, 786, 765], [763, 788, 787, 764], [762, 789, 788, 763], [761, 790, 789, 762], [760, 791, 790, 761], [759, 792, 791, 760], [758, 793, 792, 759], [793, 794, 795, 792], [792, 795, 796, 791], [791, 796, 797, 790], [790, 797, 798, 789], [789, 798, 799, 788], [788, 799, 800, 787], [787, 800, 801, 786], [786, 801, 802, 785], [785, 802, 803, 784], [784, 803, 804, 783], [783, 804, 805, 782], [782, 805, 806, 781], [781, 806, 807, 780], [780, 807, 808, 779], [779, 808, 809, 778], [778, 809, 810, 777], [777, 810, 811, 776], [776, 811, 884], [811, 812, 884], [810, 813, 812, 811], [809, 814, 813, 810], [808, 815, 814, 809], [807, 816, 815, 808], [806, 817, 816, 807], [805, 818, 817, 806], [804, 819, 818, 805], [803, 820, 819, 804], [802, 821, 820, 803], [801, 822, 821, 802], [800, 823, 822, 801], [799, 824, 823, 800], [798, 825, 824, 799], [797, 826, 825, 798], [796, 827, 826, 797], [795, 828, 827, 796], [794, 829, 828, 795], [829, 830, 831, 828], [828, 831, 832, 827], [827, 832, 833, 826], [826, 833, 834, 825], [825, 834, 835, 824], [824, 835, 836, 823], [823, 836, 837, 822], [822, 837, 838, 821], [821, 838, 839, 820], [820, 839, 840, 819], [819, 840, 841, 818], [818, 841, 842, 817], [817, 842, 843, 816], [816, 843, 844, 815], [815, 844, 845, 814], [814, 845, 846, 813], [813, 846, 847, 812], [812, 847, 884], [847, 848, 884], [846, 849, 848, 847], [845, 850, 849, 846], [844, 851, 850, 845], [843, 852, 851, 844], [842, 853, 852, 843], [841, 854, 853, 842], [840, 855, 854, 841], [839, 856, 855, 840], [838, 857, 856, 839], [837, 858, 857, 838], [836, 859, 858, 837], [835, 860, 859, 836], [834, 861, 860, 835], [833, 862, 861, 834], [832, 863, 862, 833], [831, 864, 863, 832], [830, 865, 864, 831], [865, 866, 867, 864], [864, 867, 868, 863], [863, 868, 869, 862], [862, 869, 870, 861], [861, 870, 871, 860], [860, 871, 872, 859], [859, 872, 873, 858], [858, 873, 874, 857], [857, 874, 875, 856], [856, 875, 876, 855], [855, 876, 877, 854], [854, 877, 878, 853], [853, 878, 879, 852], [852, 879, 880, 851], [851, 880, 881, 850], [850, 881, 882, 849], [849, 882, 883, 848], [848, 883, 884], [883, 885, 884], [882, 886, 885, 883], [881, 887, 886, 882], [880, 888, 887, 881], [879, 889, 888, 880], [878, 890, 889, 879], [877, 891, 890, 878], [876, 892, 891, 877], [875, 893, 892, 876], [874, 894, 893, 875], [873, 895, 894, 874], [872, 896, 895, 873], [871, 897, 896, 872], [870, 898, 897, 871], [869, 899, 898, 870], [868, 900, 899, 869], [867, 901, 900, 868], [866, 902, 901, 867], [902, 903, 904, 901], [901, 904, 905, 900], [900, 905, 906, 899], [899, 906, 907, 898], [898, 907, 908, 897], [897, 908, 909, 896], [896, 909, 910, 895], [895, 910, 911, 894], [894, 911, 912, 893], [893, 912, 913, 892], [892, 913, 914, 891], [891, 914, 915, 890], [890, 915, 916, 889], [889, 916, 917, 888], [888, 917, 918, 887], [887, 918, 919, 886], [886, 919, 920, 885], [885, 920, 884], [920, 921, 884], [919, 922, 921, 920], [918, 923, 922, 919], [917, 924, 923, 918], [916, 925, 924, 917], [915, 926, 925, 916], [914, 927, 926, 915], [913, 928, 927, 914], [912, 929, 928, 913], [911, 930, 929, 912], [910, 931, 930, 911], [909, 932, 931, 910], [908, 933, 932, 909], [907, 934, 933, 908], [906, 935, 934, 907], [905, 936, 935, 906], [904, 937, 936, 905], [903, 938, 937, 904], [938, 939, 940, 937], [937, 940, 941, 936], [936, 941, 942, 935], [935, 942, 943, 934], [934, 943, 944, 933], [933, 944, 945, 932], [932, 945, 946, 931], [931, 946, 947, 930], [930, 947, 948, 929], [929, 948, 949, 928], [928, 949, 950, 927], [927, 950, 951, 926], [926, 951, 952, 925], [925, 952, 953, 924], [924, 953, 954, 923], [923, 954, 955, 922], [922, 955, 956, 921], [921, 956, 884], [956, 957, 884], [955, 958, 957, 956], [954, 959, 958, 955], [953, 960, 959, 954], [952, 961, 960, 953], [951, 962, 961, 952], [950, 963, 962, 951], [949, 964, 963, 950], [948, 965, 964, 949], [947, 966, 965, 948], [946, 967, 966, 947], [945, 968, 967, 946], [944, 969, 968, 945], [943, 970, 969, 944], [942, 971, 970, 943], [941, 972, 971, 942], [940, 973, 972, 941], [939, 974, 973, 940], [974, 975, 976, 973], [973, 976, 977, 972], [972, 977, 978, 971], [971, 978, 979, 970], [970, 979, 980, 969], [969, 980, 981, 968], [968, 981, 982, 967], [967, 982, 983, 966], [966, 983, 984, 965], [965, 984, 985, 964], [964, 985, 986, 963], [963, 986, 987, 962], [962, 987, 988, 961], [961, 988, 989, 960], [960, 989, 990, 959], [959, 990, 991, 958], [958, 991, 992, 957], [957, 992, 884], [992, 993, 884], [991, 994, 993, 992], [990, 995, 994, 991], [989, 996, 995, 990], [988, 997, 996, 989], [987, 998, 997, 988], [986, 999, 998, 987], [985, 1000, 999, 986], [984, 1001, 1000, 985], [983, 1002, 1001, 984], [982, 1003, 1002, 983], [981, 1004, 1003, 982], [980, 1005, 1004, 981], [979, 1006, 1005, 980], [978, 1007, 1006, 979], [977, 1008, 1007, 978], [976, 1009, 1008, 977], [975, 1010, 1009, 976], [1010, 1011, 1012, 1009], [1009, 1012, 1013, 1008], [1008, 1013, 1014, 1007], [1007, 1014, 1015, 1006], [1006, 1015, 1016, 1005], [1005, 1016, 1017, 1004], [1004, 1017, 1018, 1003], [1003, 1018, 1019, 1002], [1002, 1019, 1020, 1001], [1001, 1020, 1021, 1000], [1000, 1021, 1022, 999], [999, 1022, 1023, 998], [998, 1023, 1024, 997], [997, 1024, 1025, 996], [996, 1025, 1026, 995], [995, 1026, 1027, 994], [994, 1027, 1028, 993], [993, 1028, 884], [1028, 1029, 884], [1027, 1030, 1029, 1028], [1026, 1031, 1030, 1027], [1025, 1032, 1031, 1026], [1024, 1033, 1032, 1025], [1023, 1034, 1033, 1024], [1022, 1035, 1034, 1023], [1021, 1036, 1035, 1022], [1020, 1037, 1036, 1021], [1019, 1038, 1037, 1020], [1018, 1039, 1038, 1019], [1017, 1040, 1039, 1018], [1016, 1041, 1040, 1017], [1015, 1042, 1041, 1016], [1014, 1043, 1042, 1015], [1013, 1044, 1043, 1014], [1012, 1045, 1044, 1013], [1011, 1046, 1045, 1012], [1046, 1047, 1048, 1045], [1045, 1048, 1049, 1044], [1044, 1049, 1050, 1043], [1043, 1050, 1051, 1042], [1042, 1051, 1052, 1041], [1041, 1052, 1053, 1040], [1040, 1053, 1054, 1039], [1039, 1054, 1055, 1038], [1038, 1055, 1056, 1037], [1037, 1056, 1057, 1036], [1036, 1057, 1058, 1035], [1035, 1058, 1059, 1034], [1034, 1059, 1060, 1033], [1033, 1060, 1061, 1032], [1032, 1061, 1062, 1031], [1031, 1062, 1063, 1030], [1030, 1063, 1064, 1029], [1029, 1064, 884], [1064, 1065, 884], [1063, 1066, 1065, 1064], [1062, 1067, 1066, 1063], [1061, 1068, 1067, 1062], [1060, 1069, 1068, 1061], [1059, 1070, 1069, 1060], [1058, 1071, 1070, 1059], [1057, 1072, 1071, 1058], [1056, 1073, 1072, 1057], [1055, 1074, 1073, 1056], [1054, 1075, 1074, 1055], [1053, 1076, 1075, 1054], [1052, 1077, 1076, 1053], [1051, 1078, 1077, 1052], [1050, 1079, 1078, 1051], [1049, 1080, 1079, 1050], [1048, 1081, 1080, 1049], [1047, 1082, 1081, 1048], [1082, 1083, 1084, 1081], [1081, 1084, 1085, 1080], [1080, 1085, 1086, 1079], [1079, 1086, 1087, 1078], [1078, 1087, 1088, 1077], [1077, 1088, 1089, 1076], [1076, 1089, 1090, 1075], [1075, 1090, 1091, 1074], [1074, 1091, 1092, 1073], [1073, 1092, 1093, 1072], [1072, 1093, 1094, 1071], [1071, 1094, 1095, 1070], [1070, 1095, 1096, 1069], [1069, 1096, 1097, 1068], [1068, 1097, 1098, 1067], [1067, 1098, 1099, 1066], [1066, 1099, 1100, 1065], [1065, 1100, 884], [1100, 1101, 884], [1099, 1102, 1101, 1100], [1098, 1103, 1102, 1099], [1097, 1104, 1103, 1098], [1096, 1105, 1104, 1097], [1095, 1106, 1105, 1096], [1094, 1107, 1106, 1095], [1093, 1108, 1107, 1094], [1092, 1109, 1108, 1093], [1091, 1110, 1109, 1092], [1090, 1111, 1110, 1091], [1089, 1112, 1111, 1090], [1088, 1113, 1112, 1089], [1087, 1114, 1113, 1088], [1086, 1115, 1114, 1087], [1085, 1116, 1115, 1086], [1084, 1117, 1116, 1085], [1083, 1118, 1117, 1084], [1118, 1119, 1120, 1117], [1117, 1120, 1121, 1116], [1116, 1121, 1122, 1115], [1115, 1122, 1123, 1114], [1114, 1123, 1124, 1113], [1113, 1124, 1125, 1112], [1112, 1125, 1126, 1111], [1111, 1126, 1127, 1110], [1110, 1127, 1128, 1109], [1109, 1128, 1129, 1108], [1108, 1129, 1130, 1107], [1107, 1130, 1131, 1106], [1106, 1131, 1132, 1105], [1105, 1132, 1133, 1104], [1104, 1133, 1134, 1103], [1103, 1134, 1135, 1102], [1102, 1135, 1136, 1101], [1101, 1136, 884], [1136, 0, 884], [0, 1136, 1135, 1137], [1134, 1138, 1137, 1135], [1133, 1139, 1138, 1134], [1132, 1140, 1139, 1133], [1131, 1141, 1140, 1132], [1130, 1142, 1141, 1131], [1129, 1143, 1142, 1130], [1128, 1144, 1143, 1129], [1127, 1145, 1144, 1128], [1126, 1146, 1145, 1127], [1125, 1, 1146, 1126], [1124, 1147, 1, 1125], [1123, 1148, 1147, 1124], [1122, 1149, 1148, 1123], [1121, 1150, 1149, 1122], [1120, 1151, 1150, 1121], [1119, 1152, 1151, 1120]]


#		mesh = bpy.data.meshes.new("DomeMirror")
#		mesh.from_pydata(verts,[],faces)
#		x = bpy.data.objects.new("DomeMirror",mesh)
#		base = bpy.context.scene.objects.link(x)
		
		#set smooth
		#set material
		
		#add plane
		#adjust camera pos + settings
		
		
		cam_empty = bpy.data.objects.new("FisheyeCam",None)
		scene.objects.link(cam_empty)
		cam_empty.domecam_type = "Fisheye"
		cam_empty.empty_draw_type = "SINGLE_ARROW"
		cam_empty.empty_draw_size = 1

		cam_ob.parent=cam_empty

		bpy.ops.dc.updatelist()
		scene.dc_render.cur_mirror_cam = cam_empty.name

		return {'FINISHED'}


class OpRemoveMultiCams(bpy.types.Operator):
	bl_label = "Remove Multi Camera Setup from scene"
	bl_idname = "dc.remove_multi_cams"
	
	def execute(self, context):

		sce = bpy.context.scene
		
		if (sce.dc_render.cur_multi_cam):
			for cam in sce.objects[sce.dc_render.cur_multi_cam].children:
				cam_data = cam.data
				sce.objects.unlink(cam)
				bpy.data.objects.remove(cam)
			sce.objects.unlink(sce.objects[sce.dc_render.cur_multi_cam])
			bpy.data.objects.remove(bpy.data.objects[sce.dc_render.cur_multi_cam])
			bpy.data.cameras.remove(cam_data)
			bpy.ops.dc.updatelist()
			sce.dc_render.cur_multi_cam = ""
		
		return {'FINISHED'}


class OpRemoveMirrorCams(bpy.types.Operator):
	bl_label = "Remove Mirror Camera Setup from scene"
	bl_idname = "dc.remove_mirror_cams"
	
	def execute(self, context):

		sce = bpy.context.scene
		
		if (sce.dc_render.cur_mirror_cam):
			for cam in sce.objects[sce.dc_render.cur_mirror_cam].children:
				cam_data = cam.data
				sce.objects.unlink(cam)
				bpy.data.objects.remove(cam)
			sce.objects.unlink(sce.objects[sce.dc_render.cur_mirror_cam])
			bpy.data.objects.remove(bpy.data.objects[sce.dc_render.cur_mirror_cam])
			bpy.data.cameras.remove(cam_data)
			bpy.ops.dc.updatelist()
			sce.dc_render.cur_mirror_cam = ""
		
		return {'FINISHED'}
		
class OpAddNodes(bpy.types.Operator):
	bl_label = "Add Nodes for Domemaster processing"
	bl_idname = "dc.add_nodes"

	def execute(self, context):
		sce = bpy.context.scene
		dc = sce.dc_render
		tree = sce.node_tree
		
		if (dc.use_comp):
			sce.use_nodes = True
			#clear default nodes
			#for n in tree.nodes:
			#	 tree.nodes.remove(n)
			
			if ('DomeCam Black Border' not in bpy.data.textures):
				tex = bpy.data.textures.new('DomeCam Black Border', type = 'BLEND')
				tex.progression = 'SPHERICAL'
				tex.use_color_ramp = True
				tex.color_ramp.elements[0].position = 0
				tex.color_ramp.elements[1].position = 0
				tex.color_ramp.elements[0].color = (0.0, 0.0, 0.0, 1.0)
				tex.color_ramp.elements[1].color = (0.0, 0.0, 0.0, 0.0)
				tex.use_preview_alpha = True
			else:
				tex = bpy.data.textures['DomeCam Black Border']
			
			if ('DomeViewInput' not in tree.nodes):
				dvi = tree.nodes.new(type='IMAGE')
				dvi.name = "DomeViewInput"
				dvi.label = "DomeMaster Input"
				dvi.location = (-160,420)
			else:
				dvi = tree.nodes['DomeViewInput']
			
			if ('Composite' not in tree.nodes):
				comp = tree.nodes.new(type='COMPOSITE')
				comp.location = (940,340)
			else:
				comp = tree.nodes['Composite']
				
			if ('Viewer' not in tree.nodes):
				viewer = tree.nodes.new(type='VIEWER')
				viewer.location = (940,140)
			else:
				viewer = tree.nodes['Viewer']
			
			if ('DomeBorderOverlay' not in tree.nodes):
				if ("DomeBorderOverlay" not in bpy.data.node_groups):
					dbo_group = bpy.data.node_groups.new(type='COMPOSITE', name='DomeBorderOverlay')
					dbo_group.inputs.new(type="RGBA", name="Image")
					dbo_group.outputs.new(type="RGBA", name="Image")
				else:
					dbo_group = bpy.data.node_groups['DomeBorderOverlay']
				
				dbo = tree.nodes.new(type='GROUP', group=dbo_group)
				dbo_tree = dbo.node_tree
				dbo.name = "DomeBorderOverlay"
				dbo.label = "Black Border Overlay"
				dbo.location = (690,260)
			else:
				dbo = tree.nodes['DomeBorderOverlay']
				dbo_tree = dbo.node_tree
			
			if ('DM_Mask' not in dbo_tree.nodes):
				dm_mask = dbo_tree.nodes.new(type='TEXTURE')
				dm_mask.name = "DM_Mask"
				dm_mask.location = (0, 30)
				dm_mask.texture = tex
			else:
				dm_mask = dbo_tree.nodes['DM_Mask']
			
			if ('DM_Mask_AlphaOver' not in dbo_tree.nodes):
				dm_mask_alpha_over = dbo_tree.nodes.new(type='ALPHAOVER')
				dm_mask_alpha_over.name = "DM_Mask_AlphaOver"
				dm_mask_alpha_over.use_premultiply = True
				dm_mask_alpha_over.location = (350, 30)
				dm_mask_alpha_over.inputs[2].default_value = (0.0, 0.0, 0.0, 1.0)
			else:
				dm_mask_alpha_over = dbo_tree.nodes['DM_Mask_AlphaOver']
			
			links = tree.links
			dbo_links = dbo_tree.links
			dbo_links.new(dm_mask.outputs['Value'],dm_mask_alpha_over.inputs['Fac'])
			
			dbo_links.new(dbo_tree.inputs['Image'],dm_mask_alpha_over.inputs[1])
			dbo_links.new(dbo_tree.outputs['Image'],dm_mask_alpha_over.outputs['Image'])
			
			links.new(dvi.outputs['Image'],dbo.inputs['Image'])
			links.new(dbo.outputs['Image'],comp.inputs['Image'])
			links.new(dbo.outputs['Image'],viewer.inputs['Image'])
		
		return {'FINISHED'}

class OpRenderDomemaster(bpy.types.Operator):
	bl_label = "Render Domemaster"
	bl_idname = "dc.render_domemaster"

	def execute(self, context):
		sce = bpy.context.scene
		dc = sce.dc_render
		
		renderres = round(dc.resolution/2)
		imgres = str(round(dc.resolution/2))
		
		#set render settings
		sce.render.resolution_x = renderres
		sce.render.resolution_y = renderres
		sce.render.resolution_percentage = 100
		sce.render.fps = 30
		sce.render.use_compositing = False
		sce.render.use_stamp = False
		sce.render.use_overwrite = True
		sce.render.use_file_extension = True
		
		sce.render.image_settings.file_format = 'PNG'
		
		renderpath = bpy.path.abspath(dc.renderpath)
		
		#set filename for render
		start_pos = dc.filename.find('#')
		end_pos = dc.filename.rfind('#') +1
		curframe = str(sce.frame_current).zfill(end_pos - start_pos)

		filename="%s%s%s" % (dc.filename[0:start_pos], curframe, dc.filename[end_pos:len(dc.filename)])
		
		
		#filename = str(sce.frame_current).zfill(5)
		
		#render images
		for cam in sce.objects[dc.cur_multi_cam].children:
			print("Rendering:", cam.domecam_view)
			sce.camera = cam
			if (dc.use_border and cam.domecam_view != 'top'):
				sce.render.use_border = True
				sce.render.border_min_x = 0
				sce.render.border_max_x = 1
				sce.render.border_min_y = round((-(1/140)*dc.fov) + 25/14,2)
				sce.render.border_max_y = 1
			else:
				sce.render.use_border = False
			
			if (dc.fov <=250 and cam.domecam_view == 'down'):
				continue
			
			sce.render.filepath = os.path.join(renderpath,cam.domecam_view,filename)
			#self.report({'INFO'}, "Rendering")
			#bpy.ops.wm.redraw_timer(type='DRAW_WIN_SWAP', iterations=1)
			bpy.ops.render.render(write_still=True)
			
		
		#process domemaster
		if (dc.nonapath):
			#write processing file for nona
			if (not os.path.exists(os.path.join(renderpath,"nona"))):
				os.makedirs(os.path.join(renderpath,"nona"))
			nona_process_file = os.path.join(renderpath,"nona",filename+".txt")
			file = open(nona_process_file, "w")
			file.write('p f3 w'+str(dc.resolution)+' h'+str(dc.resolution)+' v'+str(dc.fov)+' n"PNG"\n')
			file.write('m i2\n')
			file.write('i w'+imgres+' h'+imgres+' f0 v90 r0 p0 y0 n"'+os.path.join('..','top',filename+'.png')+'"\n')
			file.write('i w'+imgres+' h'+imgres+' f0 v90 r-90 p0 y90 n"'+os.path.join('..','right',filename+'.png')+'"\n')
			file.write('i w'+imgres+' h'+imgres+' f0 v90 r90 p0 y-90 d-1 e0 n"'+os.path.join('..','left',filename+'.png')+'"\n')
			file.write('i w'+imgres+' h'+imgres+' f0 v90 r0 p-90 y0 n"'+os.path.join('..','front',filename+'.png')+'"\n')
			file.write('i w'+imgres+' h'+imgres+' f0 v90 r180 p90 y0 d-1 e0 n"'+os.path.join('..','back',filename+'.png')+'"\n')
			if (dc.fov > 250):
				file.write('i w'+imgres+' h'+imgres+' f0 v90 r0 p180 y0 n"'+os.path.join('..','down',filename+'.png')+'"\n')
			file.close()
			print("processing domemaster")
			if (not os.path.exists(os.path.join(renderpath,"dm"))):
				os.makedirs(os.path.join(renderpath,"dm"))
			process = subprocess.Popen([dc.nonapath, '-o', os.path.join(renderpath,'dm',filename), nona_process_file], stdout=subprocess.PIPE)
			process.wait()
			#print (process.stdout.read())
		
		
		#postprocessing
		if (dc.use_comp):
			print("postprocessing domemaster")
			#load rendered image into input node
			if (filename+'.png' in bpy.data.images):
				image = bpy.data.images[filename+'.png']
				image.user_clear()
				image.reload()
			else:
				image = bpy.data.images.load(filepath=os.path.join(renderpath,'dm',filename+'.png'))
			bpy.context.scene.node_tree.nodes['DomeViewInput'].image = image
			
			#set render setting
			sce.render.use_compositing = True
			sce.render.use_stamp = True
			sce.render.use_stamp_time = True
			sce.render.use_stamp_date = True
			sce.render.use_stamp_render_time = False
			sce.render.use_stamp_frame = True
			sce.render.use_stamp_scene = True
			sce.render.use_stamp_camera = False
			sce.render.use_stamp_lens = False
			sce.render.use_stamp_filename = False
			sce.render.use_stamp_marker = False
			sce.render.use_stamp_sequencer_strip = False
			sce.render.use_stamp_note = True
			sce.render.stamp_note_text = dc.stamp_text
			sce.render.stamp_foreground = (1,1,1,1)
			sce.render.stamp_background = (0,0,0,0)
			#set stamp font size relative to render resolution
			if (dc.resolution >= 2048):
				sce.render.stamp_font_size = 24
			elif (dc.resolution >= 4096):
				sce.render.stamp_font_size = 36
			else:
				sce.render.stamp_font_size = 12
			sce.render.resolution_x = dc.resolution
			sce.render.resolution_y = dc.resolution
			sce.render.filepath = os.path.join(renderpath,'domemaster',filename)
		
			#render image
			bpy.ops.render.render(write_still=True)
		else:
			if (not os.path.exists(os.path.join(renderpath,"domemaster"))):
				os.makedirs(os.path.join(renderpath,"domemaster"))
			if (os.path.exists(os.path.join(renderpath,"domemaster",filename+".png"))):
				os.remove(os.path.join(renderpath,"domemaster",filename+".png"))
			os.rename(os.path.join(renderpath,"dm",filename+".png"),os.path.join(renderpath,"domemaster",filename+".png"))
		
		#deleting temporary files
		if (not dc.keep_files):
			print("deleting temporary files")
			for cam in sce.objects[dc.cur_multi_cam].children:
				os.remove(os.path.join(renderpath,cam.domecam_view,filename+".png"))
			
			os.remove(os.path.join(renderpath,"nona",filename+".txt"))
			if (dc.use_comp):
				os.remove(os.path.join(renderpath,'dm',filename+".png"))
			
			#delete empty dirs
			for camdir in os.listdir(renderpath):
				print("curdir: "+camdir)
				if (not os.listdir(os.path.join(renderpath,camdir))):
					print(camdir+" empty")
					os.rmdir(os.path.join(renderpath,camdir))
		
		#resetting some values
		sce.render.use_compositing = False
		sce.render.use_stamp = False
		
		return {'FINISHED'}

class OpRenderAnimation(bpy.types.Operator):
	bl_label = "Render Animation"
	bl_idname = "dc.render_animation"
	
	def execute(self, context):
		sce = bpy.context.scene
		
		sce.frame_set(sce.frame_start)
		
		print("start animation render")
		
		while (sce.frame_current <= sce.frame_end):
			self.report({"INFO"}, "Rendering frame "+ str(sce.frame_current))   # give feedback
			bpy.ops.dc.render_domemaster()
			sce.frame_set(sce.frame_current +1)
		
		self.report({"INFO"}, "Animation compelete")   # give feedback
		return {'FINISHED'}
		
class OpRenderImage(bpy.types.Operator):
	bl_label = "Render Image"
	bl_idname = "dc.render_image"

	def execute(self, context):
		#bpy.ops.dc.modal_timer_operator()
		bpy.ops.dc.render_domemaster()
		self.report({"INFO"}, "Render compelete")   # give feedback
		return {'FINISHED'}

class DomeCamRenderPanel(bpy.types.Panel):
	bl_idname = "OBJECT_PT_domeCamRenderPanel"
	bl_label = "DomeCam"
	bl_space_type = 'PROPERTIES'
	bl_region_type = 'WINDOW'
	bl_context = "render"
	
#	def draw_header(self, context):
#		rd = context.scene.render
#		dc = context.scene.dc_render
#		self.layout.prop(dc, "use_domecam", text="")
	
	def draw(self, context):
		layout = self.layout
		rd = context.scene.render
		dc = context.scene.dc_render
		
		
		row = layout.row()
		row.prop(dc, 'domecam_mode', expand=True)
		
		if (dc.domecam_mode == 'multicam'):
			row = layout.row(align=True)
			row.prop_search(dc, "cur_multi_cam",	dc, "multiCamList", icon='OUTLINER_OB_CAMERA')
			row.operator("dc.updatelist", text="", icon='FILE_REFRESH')
			row.operator("dc.add_multi_cams", text="", icon='ZOOMIN')
			if dc.cur_multi_cam:
				row.operator("dc.remove_multi_cams", text="", icon='ZOOMOUT')
		
			if dc.cur_multi_cam:
				row = layout.row()
				row.operator("dc.render_image", text="Image", icon='RENDER_STILL')
				row.operator("dc.render_animation", text="Animation", icon='RENDER_ANIMATION')
				#col = layout.column()
				row = layout.row()
				row.prop(dc, 'nonapath')
				row = layout.row()
				row.prop(dc, 'renderpath')
				row = layout.row()
				row.prop(dc, 'filename')
				row = layout.row()
				layout.label(text="Resolution:", icon='NONE')
			
				col = layout.column(align=True)
				row = col.row()
				row.prop(dc, 'resolution_select', expand=True)
				if (dc.resolution_select == "custom"): #(bpy.types.RENDER_MT_framerate_presets.bl_label == "Custom"):
					col.prop(dc, "resolution")
			
			
				row = layout.row()
				row.prop(dc, 'fov')
				row = layout.row()
				row.prop(dc, 'use_border')
				row = layout.row()
				row.prop(dc, 'use_comp')
				#if (dc.use_comp):
				row = layout.row()
				sub = row.column()
				sub.active = dc.use_comp
				sub.operator("dc.add_nodes")
				sub.prop(dc, 'stamp_text')
			
			
				row = layout.row()
				row.prop(dc, 'keep_files')
		elif (dc.domecam_mode == "equi"):
			row = layout.row(align=True)
			row.prop_search(dc, "cur_multi_cam",	dc, "multiCamList", icon='OUTLINER_OB_CAMERA')
			row.operator("dc.updatelist", text="", icon='FILE_REFRESH')
			row.operator("dc.add_multi_cams", text="", icon='ZOOMIN')
			if dc.cur_multi_cam:
				row.operator("dc.remove_multi_cams", text="", icon='ZOOMOUT')
		
			if dc.cur_multi_cam:
				row = layout.row()
				row.operator("dc.render_image", text="Image", icon='RENDER_STILL')
				row.operator("dc.render_animation", text="Animation", icon='RENDER_ANIMATION')
				#col = layout.column()
				row = layout.row()
				row.prop(dc, 'nonapath')
				row = layout.row()
				row.prop(dc, 'renderpath')
				row = layout.row()
				row.prop(dc, 'filename')
				
				row = layout.row()
				row.prop(dc, 'use_comp', text="Use Compositor on Panorama")
				row = layout.row()
				row.prop(dc, 'keep_files')

		elif (dc.domecam_mode == "mirror"):
			row = layout.row(align=True)
			row.prop_search(dc, "cur_mirror_cam",	dc, "mirrorCamList", icon='OUTLINER_OB_CAMERA')
			row.operator("dc.updatelist", text="", icon='FILE_REFRESH')
			row.operator("dc.add_mirror_cams", text="", icon='ZOOMIN')
			if dc.cur_mirror_cam:
				row.operator("dc.remove_mirror_cams", text="", icon='ZOOMOUT')

			if dc.cur_mirror_cam:
				row = layout.row()
				row.operator("dc.render_image", text="Image", icon='RENDER_STILL')
				row.operator("dc.render_animation", text="Animation", icon='RENDER_ANIMATION')
				#col = layout.column()
				row = layout.row()
				row.prop(dc, 'nonapath')
				row = layout.row()
				row.prop(dc, 'renderpath')
				row = layout.row()
				row.prop(dc, 'filename')

				row = layout.row()
				row.prop(dc, 'use_comp', text="Use Compositor on Panorama")
				row = layout.row()
				row.prop(dc, 'keep_files')

		
bpy.utils.register_class(DomeCamRenderPanel)

bpy.types.Object.domecam_view = bpy.props.StringProperty()
bpy.types.Object.domecam_type = bpy.props.StringProperty()


def register():
	bpy.utils.register_module(__name__)
	bpy.types.Scene.dc_render = PointerProperty(type=DCSettings, name='DomeCam Render', description='DomeCam Render Settings')

def unregister():
	bpy.utils.unregister_module(__name__)

if __name__ == "__main__":
	register()